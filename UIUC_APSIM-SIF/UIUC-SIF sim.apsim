<folder version="36" creator="Apsim 7.8-r3867" name="simulations">
  <simulation name="USsoybean">
    <metfile name="met">
      <filename name="filename" input="yes">Urbana_Champaign.met</filename>
    </metfile>
    <clock>
      <start_date type="date" description="Enter the start date of the simulation">01/01/2016</start_date>
      <end_date type="date" description="Enter the end date of the simulation">24/12/2018</end_date>
    </clock>
    <summaryfile />
    <area name="paddock">
      <Soil>
        <RecordNumber>0</RecordNumber>
        <Latitude>40.07</Latitude>
        <Longitude>-88.21</Longitude>
        <YearOfSampling>0</YearOfSampling>
        <InitialWater name="Initial water">
          <FractionFull>1</FractionFull>
          <DepthWetSoil>NaN</DepthWetSoil>
          <PercentMethod>FilledFromTop</PercentMethod>
          <RelativeTo>ll15</RelativeTo>
        </InitialWater>
        <Water>
          <Thickness>
            <double>45</double>
            <double>46</double>
            <double>75.000000000000014</double>
            <double>122.99999999999997</double>
            <double>204</double>
            <double>336.00000000000011</double>
            <double>554</double>
            <double>912.99999999999977</double>
          </Thickness>
          <BD>
            <double>1.28</double>
            <double>1.29</double>
            <double>1.29</double>
            <double>1.32</double>
            <double>1.38</double>
            <double>1.5</double>
            <double>1.61</double>
            <double>1.66</double>
          </BD>
          <AirDry>
            <double>0.07</double>
            <double>0.07</double>
            <double>0.073</double>
            <double>0.131</double>
            <double>0.139</double>
            <double>0.16</double>
            <double>0.152</double>
            <double>0.121</double>
          </AirDry>
          <LL15>
            <double>0.141</double>
            <double>0.141</double>
            <double>0.145</double>
            <double>0.145</double>
            <double>0.155</double>
            <double>0.16</double>
            <double>0.152</double>
            <double>0.121</double>
          </LL15>
          <DUL>
            <double>0.418</double>
            <double>0.418</double>
            <double>0.421</double>
            <double>0.423</double>
            <double>0.43</double>
            <double>0.432</double>
            <double>0.397</double>
            <double>0.399</double>
          </DUL>
          <SAT>
            <double>0.495063154</double>
            <double>0.503851245106552</double>
            <double>0.506024699201076</double>
            <double>0.507474899201076</double>
            <double>0.513031864799267</double>
            <double>0.514251384531907</double>
            <double>0.498689816306687</double>
            <double>0.486409827446724</double>
          </SAT>
          <SoilCrop name="wheat">
            <Thickness>
              <double>45</double>
              <double>46</double>
              <double>75.000000000000014</double>
              <double>122.99999999999997</double>
              <double>204</double>
              <double>336.00000000000011</double>
              <double>554</double>
              <double>912.99999999999977</double>
            </Thickness>
            <LL>
              <double>0.13</double>
              <double>0.13</double>
              <double>0.13</double>
              <double>0.14</double>
              <double>0.15</double>
              <double>0.13</double>
              <double>0.13</double>
              <double>NaN</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.08</double>
              <double>0.06</double>
              <double>0.04</double>
              <double>0.02</double>
              <double>0.01</double>
              <double>NaN</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>NaN</double>
            </XF>
          </SoilCrop>
          <SoilCrop name="maize">
            <Thickness>
              <double>45</double>
              <double>46</double>
              <double>75.000000000000014</double>
              <double>122.99999999999997</double>
              <double>204</double>
              <double>336.00000000000011</double>
              <double>554</double>
              <double>912.99999999999977</double>
            </Thickness>
            <LL>
              <double>0.13</double>
              <double>0.13</double>
              <double>0.13</double>
              <double>0.14</double>
              <double>0.15</double>
              <double>0.13</double>
              <double>0.13</double>
              <double>NaN</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.08</double>
              <double>0.06</double>
              <double>0.04</double>
              <double>0.02</double>
              <double>NaN</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>NaN</double>
            </XF>
          </SoilCrop>
          <SoilCrop name="soybean">
            <Thickness>
              <double>45</double>
              <double>46</double>
              <double>75.000000000000014</double>
              <double>122.99999999999997</double>
              <double>204</double>
              <double>336.00000000000011</double>
              <double>554</double>
              <double>912.99999999999977</double>
            </Thickness>
            <LL>
              <double>0.141</double>
              <double>0.141</double>
              <double>0.145</double>
              <double>0.145</double>
              <double>0.155</double>
              <double>0.16</double>
              <double>0.152</double>
              <double>0.121</double>
            </LL>
            <KL>
              <double>0.1</double>
              <double>0.1</double>
              <double>0.08</double>
              <double>0.06</double>
              <double>0.04</double>
              <double>0.02</double>
              <double>0.01</double>
              <double>0.01</double>
            </KL>
            <XF>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>1</double>
              <double>0</double>
            </XF>
          </SoilCrop>
        </Water>
        <SoilWater>
          <SummerCona>3.5</SummerCona>
          <SummerU>6</SummerU>
          <SummerDate>1-jun</SummerDate>
          <WinterCona>3.5</WinterCona>
          <WinterU>6</WinterU>
          <WinterDate>1-dec</WinterDate>
          <DiffusConst>40</DiffusConst>
          <DiffusSlope>16</DiffusSlope>
          <Salb>0.23</Salb>
          <CN2Bare>78</CN2Bare>
          <CNRed>20</CNRed>
          <CNCov>0.8</CNCov>
          <Slope>NaN</Slope>
          <DischargeWidth>NaN</DischargeWidth>
          <CatchmentArea>NaN</CatchmentArea>
          <MaxPond>NaN</MaxPond>
          <Thickness>
            <double>200</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
            <double>200</double>
          </Thickness>
          <SWCON>
            <double>0.2</double>
            <double>0.2</double>
            <double>0.2</double>
            <double>0.2</double>
            <double>0.2</double>
            <double>0.2</double>
            <double>0.2</double>
            <double>0.2</double>
            <double>0.2</double>
          </SWCON>
        </SoilWater>
        <SoilOrganicMatter>
          <RootCN>40</RootCN>
          <RootWt>200</RootWt>
          <SoilCN>12.5</SoilCN>
          <EnrACoeff>7.4</EnrACoeff>
          <EnrBCoeff>0.2</EnrBCoeff>
          <Thickness>
            <double>45</double>
            <double>46</double>
            <double>75.000000000000014</double>
            <double>122.99999999999997</double>
            <double>204</double>
            <double>336.00000000000011</double>
            <double>554</double>
          </Thickness>
          <OC>
            <double>0.893</double>
            <double>0.852</double>
            <double>0.899</double>
            <double>1.048</double>
            <double>1.127</double>
            <double>0.927</double>
            <double>0.824</double>
          </OC>
          <FBiom>
            <double>0.025</double>
            <double>0.02</double>
            <double>0.015</double>
            <double>0.01</double>
            <double>0.01</double>
            <double>0.01</double>
            <double>0.01</double>
          </FBiom>
          <FInert>
            <double>0.4</double>
            <double>0.6</double>
            <double>0.8</double>
            <double>0.9</double>
            <double>0.95</double>
            <double>0.95</double>
            <double>0.95</double>
          </FInert>
          <OCUnits>Total</OCUnits>
        </SoilOrganicMatter>
        <Analysis>
          <Thickness>
            <double>45</double>
            <double>46</double>
            <double>75.000000000000014</double>
            <double>122.99999999999997</double>
            <double>204</double>
            <double>336.00000000000011</double>
            <double>554</double>
          </Thickness>
          <Texture>
            <string />
            <string />
            <string />
            <string />
            <string />
            <string />
            <string />
          </Texture>
          <MunsellColour>
            <string />
            <string />
            <string />
            <string />
            <string />
            <string />
            <string />
          </MunsellColour>
          <PH>
            <double>8.059</double>
            <double>8.063</double>
            <double>8.038</double>
            <double>8.054</double>
            <double>7.978</double>
            <double>8.109</double>
            <double>8.301</double>
          </PH>
          <ParticleSizeSand>
            <double>45.93</double>
            <double>46.31</double>
            <double>47.25</double>
            <double>42.56</double>
            <double>34.99</double>
            <double>30.1</double>
            <double>34.4</double>
          </ParticleSizeSand>
          <ParticleSizeSilt>
            <double>37.8</double>
            <double>37.23</double>
            <double>35.8</double>
            <double>38.76</double>
            <double>37.51</double>
            <double>49.77</double>
            <double>44.63</double>
          </ParticleSizeSilt>
          <ParticleSizeClay>
            <double>16.27</double>
            <double>16.46</double>
            <double>16.95</double>
            <double>18.68</double>
            <double>27.5</double>
            <double>20.13</double>
            <double>20.97</double>
          </ParticleSizeClay>
          <PHUnits>Water</PHUnits>
          <BoronUnits>HotWater</BoronUnits>
        </Analysis>
        <Sample name="InitialNitrogen">
          <Thickness>
            <double>45</double>
            <double>46</double>
            <double>75.000000000000014</double>
            <double>122.99999999999997</double>
            <double>204</double>
            <double>336.00000000000011</double>
            <double>554</double>
          </Thickness>
          <NO3>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </NO3>
          <NH4>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
            <double>0</double>
          </NH4>
          <NO3Units>ppm</NO3Units>
          <NH4Units>ppm</NH4Units>
          <SWUnits>Volumetric</SWUnits>
          <OCUnits>Total</OCUnits>
          <PHUnits>Water</PHUnits>
        </Sample>
      </Soil>
      <surfaceom name="SurfaceOrganicMatter">
        <PoolName type="text" description="Organic Matter pool name">soybean</PoolName>
        <type type="list" listvalues="bambatsi,barley,base_type,broccoli,camaldulensis,canola,centro,chickpea,chikenmanure_base,cm,cmA,cmB,constants,cotton,cowpea,danthonia,fababean,fieldpea,fym,gbean,globulus,goatmanure,grandis,grass,horsegram,inert,lablab,lentil,lucerne,lupin,maize,manB,manure,medic,millet,mucuna,nativepasture,navybean,oats,orobanche,peanut,pigeonpea,potato,rice,sorghum,soybean,stylo,sugar,sunflower,sweetcorn,sweetsorghum,tillage,tithonia,vetch,weed,wheat" description="Organic Matter type">soybean</type>
        <mass type="text" description="Initial surface residue (kg/ha)">1000</mass>
        <cnr type="text" description="C:N ratio of initial residue">80</cnr>
        <standing_fraction type="text" description="Fraction of residue standing">0</standing_fraction>
      </surfaceom>
      <fertiliser />
      <soybean>
        <ini>
          <filename input="yes">Soybean.xml</filename>
        </ini>
      </soybean>
      <outputfile>
        <filename output="yes">USsoybean.out</filename>
        <title>USsoybean</title>
        <variables name="Variables">
          <variable>dd/mm/yyyy as Date</variable>
          <variable>yield</variable>
          <variable>Fsingle_spectral_toc as SIF_sim</variable>
        </variables>
        <events name="Reporting Frequency">
          <event>daily</event>
        </events>
        <Graph name="XY">
          <Legend>
            <CheckedTitles>Plot1, SIF_sim,USsoybean</CheckedTitles>
            <CheckedTitles>Plot2, SIF760,sitesif2.prn</CheckedTitles>
            <CheckedTitles>Plot3, TROPOMISIF,UStropomisif</CheckedTitles>
          </Legend>
          <Plot name="Plot1">
            <SeriesType>Solid line</SeriesType>
            <PointType>None</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>SIF_sim</Y>
            <GDApsimFileReader name="ApsimFileReader" />
          </Plot>
          <Plot name="Plot2">
            <SeriesType>No line</SeriesType>
            <PointType>Circle</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>SIF760</Y>
            <GDApsimFileReader name="ApsimFileReader">
              <FileName>sitesif2.prn.txt</FileName>
            </GDApsimFileReader>
          </Plot>
          <Plot name="Plot3">
            <SeriesType>No line</SeriesType>
            <PointType>Circle</PointType>
            <colour>
            </colour>
            <X>Date</X>
            <Y>TROPOMISIF</Y>
            <GDApsimFileReader name="ApsimFileReader">
              <FileName>UStropomisif.prn</FileName>
            </GDApsimFileReader>
          </Plot>
        </Graph>
      </outputfile>
      <folder name="Manager folder">
        <manager name="Reset water, nitrogen, surfaceOM and phosphorus on fixed date">
          <ui>
            <category type="category" description="When should a reset be done" />
            <reset_date type="ddmmmdate" description="Enter date of reset (dd-mmm) : ">14-may</reset_date>
            <category type="category" description="Reset details" />
            <soilmodule type="modulename" description="Name of your soil module : ">Soil</soilmodule>
            <surfaceommodule type="modulename" description="Name of your surface organic matter module : ">SurfaceOrganicMatter</surfaceommodule>
            <pmodule type="modulename" description="Name of your phosphorus module : " />
            <resetWater type="yesno" description="Reset soil water?">yes</resetWater>
            <resetNitrogen type="yesno" description="Reset soil nitrogen?">yes</resetNitrogen>
            <resetSurfaceOM type="yesno" description="Reset surface organic matter?">yes</resetSurfaceOM>
            <resetP type="yesno" description="Reset phosphorus?" />
          </ui>
          <script>
            <text>
         if (today = date('[reset_date]')) then
            resetWater = '[resetWater]'
            resetNitrogen  = '[resetNitrogen]'
            resetSurfaceOM = '[resetSurfaceOM]'
            resetP = '[resetP]'
            if (resetWater = 'yes') then
                '[soilmodule] Water' reset
            endif
            if (resetNitrogen = 'yes') then
                '[soilmodule] Nitrogen' reset
            endif
            if (resetSurfaceOM = 'yes') then
                '[surfaceommodule]' reset
            endif
            if (resetP = 'yes') then
                '[pmodule]' reset
            endif
            act_mods reseting
         endif</text>
            <event>start_of_day</event>
          </script>
        </manager>
        <manager name="Sow on a fixed date">
          <ui>
            <category type="category" description="Sowing criteria" />
            <date type="text" description="Enter sowing date (dd-mmm) : ">26-may-2016</date>
            <category type="category" description="Sowing parameters" />
            <crop type="crop" description="Enter name of crop to sow : ">soybean</crop>
            <density type="text" description="Enter sowing density  (plants/m2) : ">60</density>
            <depth type="text" description="Enter sowing depth  (mm) : ">30</depth>
            <cultivar type="cultivars" description="Enter cultivar : ">davis</cultivar>
            <class type="classes" description="Enter crop growth class : ">plant</class>
            <row_spacing type="text" description="Enter row spacing (mm) : ">400</row_spacing>
          </ui>
          <script>
            <text>
        if (today = date('[date]') then
              [crop] sow plants =[density], sowing_depth = [depth], cultivar = [cultivar], row_spacing = [row_spacing], crop_class = [class]
         endif</text>
            <event>start_of_day</event>
          </script>
        </manager>
        <manager name="Fertilise on fixed date">
          <ui>
            <category type="category" description="When should fertiliser be applied" />
            <fert_date type="ddmmmdate" description="Enter fertiliser date (dd-mmm) : ">15-jun</fert_date>
            <fert_criteria type="text" description="Don't add fertiliser if N in top 2 layers exceeds (kg/ha) : ">1000</fert_criteria>
            <category type="category" description="Fertiliser application details" />
            <fertmodule type="modulename" description="Module used to apply the fertiliser : ">fertiliser</fertmodule>
            <fert_amount type="text" description="Amount of fertiliser to apply (kg/ha) : ">500</fert_amount>
            <fert_type type="list" listvalues="NO3_N, NH4_N, NH4NO3, UAN_N, urea_N, urea_no3, urea, nh4so4_n, rock_p, banded_p, broadcast_p" description="Fertiliser type : ">NO3_N</fert_type>
          </ui>
          <script>
            <text>
         if (today = date('[fert_date]') then
            N_topsoil = no3(1) + nh4(1) + no3(2) + nh4(2)
            if (N_topsoil &lt; [fert_criteria]) then
               [fertmodule] apply amount = [fert_amount] (kg/ha), depth = 50 (mm), type = [fert_type] ()
            endif
         endif</text>
            <event>start_of_day</event>
          </script>
        </manager>
        <manager name="Harvesting rule">
          <ui>
            <category type="category" description="Harvesting criteria" />
            <crop type="crop" description="Enter name of crop to harvest when ripe : ">soybean</crop>
          </ui>
          <script>
            <text>

           if [crop].StageName = 'harvest_ripe' or [crop].plant_status = 'dead' then
              [crop]  harvest
              [crop]  end_crop
           endif</text>
            <event>end_of_day</event>
          </script>
        </manager>
        <manager name="Sow on a fixed date1">
          <ui>
            <category type="category" description="Sowing criteria" />
            <date type="text" description="Enter sowing date (dd-mmm) : ">26-may-2017</date>
            <category type="category" description="Sowing parameters" />
            <crop type="crop" description="Enter name of crop to sow : ">soybean</crop>
            <density type="text" description="Enter sowing density  (plants/m2) : ">60</density>
            <depth type="text" description="Enter sowing depth  (mm) : ">30</depth>
            <cultivar type="cultivars" description="Enter cultivar : ">davis</cultivar>
            <class type="classes" description="Enter crop growth class : ">plant</class>
            <row_spacing type="text" description="Enter row spacing (mm) : ">400</row_spacing>
          </ui>
          <script>
            <text>
        if (today = date('[date]') then
              [crop] sow plants =[density], sowing_depth = [depth], cultivar = [cultivar], row_spacing = [row_spacing], crop_class = [class]
         endif</text>
            <event>start_of_day</event>
          </script>
        </manager>
        <manager name="Sow on a fixed date2">
          <ui>
            <category type="category" description="Sowing criteria" />
            <date type="text" description="Enter sowing date (dd-mmm) : ">10-may-2018</date>
            <category type="category" description="Sowing parameters" />
            <crop type="crop" description="Enter name of crop to sow : ">soybean</crop>
            <density type="text" description="Enter sowing density  (plants/m2) : ">60</density>
            <depth type="text" description="Enter sowing depth  (mm) : ">30</depth>
            <cultivar type="cultivars" description="Enter cultivar : ">davis</cultivar>
            <class type="classes" description="Enter crop growth class : ">plant</class>
            <row_spacing type="text" description="Enter row spacing (mm) : ">400</row_spacing>
          </ui>
          <script>
            <text>
        if (today = date('[date]') then
              [crop] sow plants =[density], sowing_depth = [depth], cultivar = [cultivar], row_spacing = [row_spacing], crop_class = [class]
         endif</text>
            <event>start_of_day</event>
          </script>
        </manager>
      </folder>
      <manager2 name="Photosynthesis">
        <ui>
          <Vc type="text" description="PM.Canopy.CPath.PsiVc">1.1</Vc>
          <J type="text" description="PM.Canopy.CPath.PsiJ ">1.85</J>
          <Rd type="text" description="PM.Canopy.CPath.PsiRd">0</Rd>
          <Gm type="text" description="PM.Canopy.CPath.PsiGm">0.005296</Gm>
        </ui>
        <text>
using System;
using ModelFramework;
using LayerCanopyPhotosynthesis; 

 
public class Script 
{   
   [Param()] private double Vc;
   [Param()] private double J;
   [Param()] private double Rd;
   [Param()] private double Gm;
   [Link]  public Simulation MySimulation;
   [Link] Paddock MyPaddock; // Can be used to dynamically get access to simulation structure and variables
   [Input] DateTime Today;   // Equates to the value of the current simulation date - value comes from CLOCK
   [Output] public double[] dcaps = new double[4];
   
   //Additional Outputs
   [Output] public double BIOtotalDAY;
   [Output] public double BIOshootDAY;
   [Output] public double RootShoot;
   [Output] public double EcanDemand; 
   [Output] public double EcanSupply;
   [Output] public double RUE;
   [Output] public double TE; 
   [Output] public double RadIntDcaps; 
   
   
   
   
   public PhotosynthesisModel PM;
   public double LAITrigger;
   


   // The following event handler will be called once at the beginning of the simulation
   [EventHandler] public void OnInitialised()
   {
      string PhotosyntheticPathway = "C3"; //Change this to change pathway
            
      if(PhotosyntheticPathway == "C3")
      {
         PM = new LayerCanopyPhotosynthesis.PhotosynthesisModelC3();
         
         PM.Initialised = false;
         PM.photoPathway = LayerCanopyPhotosynthesis.PhotosynthesisModel.PhotoPathway.C3;

         PM.conductanceModel = LayerCanopyPhotosynthesis.PhotosynthesisModel.ConductanceModel.SIMPLE;
         PM.electronTransportModel = LayerCanopyPhotosynthesis.PhotosynthesisModel.ElectronTransportModel.EMPIRICAL;

         PM.Canopy.NLayers = 1;
         
         LAITrigger = 1.0;
         
         PM.B = 0.41;                                    //B-Biomass Conversion Coefficient
         PM.Canopy.LeafAngle = 60;                       //LeafAngle-Leaf Angle
         PM.Canopy.CPath.SLNRatioTop = 1.3;              //SLNRatioTop-SLNRatioTop
         
         PM.Canopy.CPath.PsiVc = Vc;                    //psiVc-Psi Vc 1.1
         PM.Canopy.CPath.PsiJ = J;                     //psiJ-Psi J 1.85
         PM.Canopy.CPath.PsiRd = Rd;                      //psiRd-Psi Rd
         
         PM.Canopy.CPath.PsiGm = Gm;               //0.005296
         PM.Canopy.CPath.CGm = 0.0;
         
         double PsiFactor = 1;                               //psiFactor-Psi Reduction Factor
         
         PM.Canopy.CPath.PsiVc *= PsiFactor;
         PM.Canopy.CPath.PsiJ *= PsiFactor;
         PM.Canopy.CPath.PsiRd *= PsiFactor;                   
         
         PM.Canopy.Ca = 370;                             //Ca-Atomospheric CO2 partial pressure
         PM.Canopy.CPath.CiCaRatio = 0.70;               //CiCaRatio-Ci/Ca Ratio (0 to calculate using Ci)
         PM.Canopy.CPath.StructuralN = 14;               //structuralN-Structural N
         PM.Canopy.Gbs_CO2 = 0.003;                      //gbs-Conductance to CO2 leakage from the bundle sheath to mesophyll
         
         PM.EnvModel.RPAR = 0.5;                         //R_PAR-Fraction of PAR energy to that of the total solar
         
         PM.Canopy.DiffuseExtCoeff = 0.78;               //kd_PAR-Diffuse PAR extinction coefficient
         PM.Canopy.DiffuseExtCoeffNIR = 0.8;             //kd_NIR-Diffuse NIR extinction coefficient
         PM.Canopy.LeafScatteringCoeff = 0.15;           //s_PAR-Leaf-level scattering coefficient for PAR
         PM.Canopy.LeafScatteringCoeffNIR = 0.8;         //s_NIR-Leaf-level scattering coefficient for NIR
         PM.Canopy.DiffuseReflectionCoeff = 0.036;       //rcd_PAR-Canopy-level reflection coefficient for diffuse PAR
         PM.Canopy.DiffuseReflectionCoeffNIR = 0.389;    //rcd_NIR-Canopy-level reflection coefficient for diffuse NIR
         
         PM.Canopy.OxygenPartialPressure = 210000;       //Ol-Oxygen partial pressure inside leaves in canopy
         
         PM.Canopy.U0 = 1.5;                               //u-Wind speed
         PM.Canopy.LeafWidth = 0.05;                     //wl-Leaf width
         PM.Canopy.Ku = 1.5;                             //kw-Wind speed profile distribution coefficient
         
         PM.Canopy.Theta = 0.7;                          //theta-empirical curvature factor
         PM.Canopy.F = 0.15;                             //f-spectral correction factor
         
         PM.Canopy.CPath.KcP25 = 273.422964228666;       //Kc_25-Michaelis Menten constants of Rubisco carboxylation at 25 degrees C
         PM.Canopy.CPath.KcTMin = 93720;                 //Kc_min-Minimum temperature of Kc
         
         PM.Canopy.CPath.KoP25 = 165824.064155384;       //Ko_25-Michaelis Menten constants of Rubisco oxygenation at 25 degrees C
         PM.Canopy.CPath.KoTMin = 33600;                 //Ko_min-Minimum temperature of Ko
         
         PM.Canopy.CPath.VcTMin = 65330;                 //Vcmax_min-Minimum temperature of Vcmax
         
         PM.Canopy.CPath.VcMax_VoMaxP25 = 4.59217066521612;    //VcmaxVomax_25-Vcmax/Vomax at 25 degrees C
         PM.Canopy.CPath.VcMax_VoMaxTMin = 35713.19871277176;   //VcmaxVomax_min-Minimum temperature of Vcmax/Vomax
         
         PM.Canopy.CPath.RdTMin = 46390;                 //Rd_min-Minimum temperature of Rd
       
         PM.Canopy.CPath.JTMin = 0.0;                    //Jmax_min-Minimum temperature of Jmax
         PM.Canopy.CPath.JTOpt = 30;                     //Jmax_opt-Optimum temperature of Jmax
         PM.Canopy.CPath.JTMax = 45;                     //Jmax_max-Maximum temperature of Jmax
         PM.Canopy.CPath.JMaxC = 0.911017958600129;      //Jmax_c-Scaling constant of Jamx
         PM.Canopy.CPath.JBeta = 1;                      //Jmax Beta value
         
       
         //PM.Canopy.CPath.GmP25 = 0.55;                   //gm_25-Mesophyll conductance for CO2 at 25 degrees C
         PM.Canopy.CPath.GmTMin = 0;                     //gm_min-Minimum temperature of gm
         PM.Canopy.CPath.GmTOpt = 29.2338417788683;                    //gm_opt-Optimum temperature of gm
         PM.Canopy.CPath.GmTMax = 45;                    //gm_max-Maximum temperature of gm
         PM.Canopy.CPath.GmC = 0.875790608584141;        //gm_c-Scaling constant of gm
         PM.Canopy.CPath.GmBeta = 1;                     //gm Beta value
         
      }
      else
      {
         PM = new LayerCanopyPhotosynthesis.PhotosynthesisModelC4();
         
         PM.Initialised = false;
         PM.photoPathway = LayerCanopyPhotosynthesis.PhotosynthesisModel.PhotoPathway.C4;

         PM.conductanceModel = LayerCanopyPhotosynthesis.PhotosynthesisModel.ConductanceModel.SIMPLE;
         PM.electronTransportModel = LayerCanopyPhotosynthesis.PhotosynthesisModel.ElectronTransportModel.EMPIRICAL;

         PM.Canopy.NLayers = 1;
         
         LAITrigger = 1;
         
         PM.B = 0.41;                                   //B-Biomass Conversion Coefficient
         
         PM.Canopy.LeafAngle = 60;                       //LeafAngle-Leaf Angle
         PM.Canopy.CPath.SLNRatioTop = 1.3;              //SLNRatioTop-SLNRatioTop
         
         PM.Canopy.CPath.PsiVc = 0.465;                  //psiVc-Psi Vc
         PM.Canopy.CPath.PsiJ = 2.7;                     //psiJ-Psi J
         PM.Canopy.CPath.PsiRd = 0;                      //psiRd-Psi Rd
         PM.Canopy.CPath.PsiVp = 1.55;                   //psiVp-Psi Vp (C4)
         
         PM.Canopy.CPath.PsiGm = 0;
         PM.Canopy.CPath.CGm = 1.2;
         
         double PsiFactor = 0.4;                         //psiFactor-Psi Reduction Factor
         
         PM.Canopy.CPath.PsiVc *= PsiFactor;
         PM.Canopy.CPath.PsiJ *= PsiFactor;
         PM.Canopy.CPath.PsiRd *= PsiFactor;
         PM.Canopy.CPath.PsiVp *= PsiFactor;
         
         
         PM.Canopy.Ca = 363;                             //Ca-Atomospheric CO2 partial pressure
         PM.Canopy.Vpr_l = 120;                          //Vpr-PEP regeneration rate per unit leaf area at 25°C (C4)
         PM.Canopy.CPath.CiCaRatio = 0.45;               //CiCaRatio-Ci/Ca Ratio (0 to calculate using Ci)
         PM.Canopy.CPath.StructuralN = 14;               //structuralN-Structural N
         
         PM.EnvModel.RPAR = 0.5;                         //R_PAR-Fraction of PAR energy to that of the total solar
         
         PM.Canopy.Gbs_CO2 = 0.003;                      //gbs-Conductance to CO2 leakage from the bundle sheath to mesophyll
         
         PM.Canopy.DiffuseExtCoeff = 0.78;               //kd_PAR-Diffuse PAR extinction coefficient
         PM.Canopy.DiffuseExtCoeffNIR = 0.8;             //kd_NIR-Diffuse NIR extinction coefficient
         PM.Canopy.LeafScatteringCoeff = 0.15;           //s_PAR-Leaf-level scattering coefficient for PAR
         PM.Canopy.LeafScatteringCoeffNIR = 0.8;         //s_NIR-Leaf-level scattering coefficient for NIR
         PM.Canopy.DiffuseReflectionCoeff = 0.036;       //rcd_PAR-Canopy-level reflection coefficient for diffuse PAR
         PM.Canopy.DiffuseReflectionCoeffNIR = 0.389;    //rcd_NIR-Canopy-level reflection coefficient for diffuse NIR
         
         PM.Canopy.OxygenPartialPressure = 210000;       //Ol-Oxygen partial pressure inside leaves in canopy
         
         PM.Canopy.U0 = 1.5;                               //u-Wind speed
         PM.Canopy.LeafWidth = 0.15;                     //wl-Leaf width
         PM.Canopy.Ku = 1.5;                             //kw-Wind speed profile distribution coefficient
         
         PM.Canopy.Theta = 0.7;                          //theta-empirical curvature factor
         PM.Canopy.F = 0.15;                             //f-spectral correction factor
         PM.Canopy.Alpha = 0.1;                          //alpha-fraction of PSII activity in the bundle sheath (C4)
         PM.Canopy.CPath.Phi = 2.0;                      //phi-extra energy (ATP) cost required from processes other than the C3 cycle
         PM.Canopy.X = PM.Canopy.CPath.Phi / (3 + PM.Canopy.CPath.Phi); //x-fraction of electron transport partitioned to mesophyll chloroplasts (C4)
         
         PM.Canopy.CPath.KcP25 = 1210;                   //Kc_25-Michaelis Menten constants of Rubisco carboxylation at 25 degrees C
         PM.Canopy.CPath.KcTMin = 64200;                 //Kc_min-Minimum temperature of Kc
         
         PM.Canopy.CPath.KoP25 = 292000;                 //Ko_25-Michaelis Menten constants of Rubisco oxygenation at 25 degrees C
         PM.Canopy.CPath.KoTMin = 10500;                 //Ko_min-Minimum temperature of Ko
            
         PM.Canopy.CPath.VcTMin = 78000;                 //Vcmax_min-Minimum temperature of Vcmax
          
         PM.Canopy.CPath.VcMax_VoMaxP25 = 5.51328906454566;    //VcmaxVomax_25-Vcmax/Vomax at 25 degrees C
         PM.Canopy.CPath.VcMax_VoMaxTMin = 21265.4029552906;   //VcmaxVomax_min-Minimum temperature of Vcmax/Vomax
           
         PM.Canopy.CPath.KpP25 = 75;                    //Kp_25-Michaelis-Menten constant of PEP carboxylation at 25 degrees C (C4)
         PM.Canopy.CPath.KpTMin = 36300;                 //Kp_min-Minimum temperature of Kp (C4)
            
         PM.Canopy.CPath.VpMaxTMin = 57043.2677590512;   //Vpmax_min-Minimum temperature of Vpmax (C4)
           
         PM.Canopy.CPath.RdTMin = 46390;                 //Rd_min-Minimum temperature of Rd
         
         PM.Canopy.CPath.JTMin = 0;                      //Jmax_min-Minimum temperature of Jmax
         PM.Canopy.CPath.JTOpt = 37.8649150880407;       //Jmax_opt-Optimum temperature of Jmax
         PM.Canopy.CPath.JTMax = 55;                     //Jmax_max-Maximum temperature of Jmax
         PM.Canopy.CPath.JMaxC = 0.711229539802063;      //Jmax_c-Scaling constant of Jamx
         PM.Canopy.CPath.JBeta = 1;
         
         //PM.Canopy.CPath.GmP25 = 1.2;                   //gm_25-Mesophyll conductance for CO2 at 25 degrees C
         PM.Canopy.CPath.GmTMin = 0;                     //gm_min-Minimum temperature of gm
         PM.Canopy.CPath.GmTOpt = 42;                    //gm_opt-Optimum temperature of gm
         PM.Canopy.CPath.GmTMax = 55;                    //gm_max-Maximum temperature of gm
         PM.Canopy.CPath.GmC = 0.462820450976839;        //gm_c-Scaling constant of gm
         PM.Canopy.CPath.GmBeta = 1;
         
          
        
      }
      //Set the LAI trigger
      MyPaddock.Set("laiTrigger", LAITrigger);
      //Set the LAI trigger
      MyPaddock.Set("laiTrigger", LAITrigger);
   }
   // This routine is called when the plant model wants us to do the calculation
   //[EventHandler] public void Ondodcaps(CalcDCaPType c) {
   [EventHandler] public void Ondodcaps() {
      //      ApsimC3PhotoLink p = new ApsimC3PhotoLink();
      //      dcap = p.Calc(c.doy, c.latitude, c.maxT, c.minT, c.radn, c.lai, c.sln, c.soilWaterAvail);
      //
      
      int DOY = 0;
      double latitude = 0;
      double maxT = 0;
      double minT = 0;
      double radn = 0;
      double RootShootRatio = 0;
      double SLNDCaPS = 0;
      double SWAvailable = 0;
      double lai = 0;
      double a=Math.Sqrt(9);
     
      MyPaddock.Get("DOY", out DOY);
      MyPaddock.Get("latitude", out latitude);
      MyPaddock.Get("maxT", out maxT);
      MyPaddock.Get("minT", out minT);
      MyPaddock.Get("radn", out radn);
      MyPaddock.Get("RootShootRatio", out RootShootRatio);
      MyPaddock.Get("SLN", out SLNDCaPS);
      MyPaddock.Get("SWAvailable", out SWAvailable);
      MyPaddock.Get("lai", out lai);
      
      //Check
      //            Console.WriteLine("DCaps Input Manager--------------");
      //            Console.WriteLine("DOY = " + DOY.ToString());
      //            Console.WriteLine("latitude = " + latitude.ToString());
      //            Console.WriteLine("maxT = " + maxT.ToString());
      //            Console.WriteLine("minT = " + minT.ToString());
      //            Console.WriteLine("radn = " + radn.ToString());
      //            Console.WriteLine("RootShootRatio = " + RootShootRatio.ToString());
      //            Console.WriteLine("SLNDCaPS = " + SLNDCaPS.ToString());
      //            Console.WriteLine("SWAvailable = " + SWAvailable.ToString());
      //            Console.WriteLine("lai = " + lai.ToString());
      //            Console.WriteLine("DCaps Input Manager--------------");
      
      //public override double[] RunApsim(int DOY, double latitude, double maxT, double minT, double radn, double lai, double SLNDCaPS, double soilWaterAvail, double RootShootRatio)
        
      dcaps = PM.RunApsim(DOY, latitude, maxT, minT, radn, lai, SLNDCaPS, SWAvailable, RootShootRatio);
      
      //Additional outputs
      RootShoot = RootShootRatio;
      BIOshootDAY = dcaps[0];
      BIOtotalDAY = BIOshootDAY * (1 + RootShoot);
      EcanDemand = dcaps[1]; 
      EcanSupply = dcaps[2];
      RadIntDcaps = dcaps[3];
      RUE = BIOshootDAY / RadIntDcaps;
      TE = BIOshootDAY / EcanSupply; 
      
      
      
      //Check Outputs
      //      Console.WriteLine("DCaps Out Manager--------------");
      //      Console.WriteLine("1 = " + dcaps[0].ToString());
      //      Console.WriteLine("2 = " + dcaps[1].ToString());
      //      Console.WriteLine("3 = " + dcaps[2].ToString());
      //      Console.WriteLine("4 = " + dcaps[3].ToString());
      //      Console.WriteLine("DCaps Out Manager--------------");
      //      
      
   }
   // After we've done the calculation, the result is here
      
   // Set its default value to garbage so that we find out quickly
   [EventHandler] public void OnPrepare()
   {
      for(int i = 0; i &lt; 4; i++) { dcaps[i] = -1.0f;}
   }
}
		</text>
        <Reference>
          <ref type="text" description="Path to assembly:">%apsim%/Model/DCaPST.dll</ref>
        </Reference>
      </manager2>
      <manager2 name="FLUSPECT">
        <ui>
          <Cab type="text" description="Chlorophyll AB content">28</Cab>
          <Cdm type="text" description="Dry matter content">0.012</Cdm>
          <Cw type="text" description="Leaf water equivalent layer">0.009</Cw>
          <Cs type="text" description="Scenecent material fraction">0</Cs>
          <Cca type="text" description="Carotenoid content">20</Cca>
          <Cant type="text" description="Anthocyanins">0</Cant>
          <N type="text" description="Leaf thickness parameters">1.4</N>
          <single_spectral type="text" description="The specific single wavelength of spectrum">760</single_spectral>
        </ui>
        <text>
using System;
using ModelFramework;


  



   public class Script 
   {
   [Link]  public Simulation MySimulation;
   [Link] Paddock MyPaddock; // Can be used to dynamically get access to simulation structure and variables
   [Input] DateTime Today; 
   [Param()] private double Cab;
   [Param()] private double Cdm;
   [Param()] private double Cw;
   [Param()] private double Cs;
   [Param()] private double Cca;
   [Param()] private double Cant;
   [Param()] private double N;
   [Param()] int single_spectral;   
   
   [Output] public double ratio;
   [Output] public double [] ratioall=new double[211];
   
   
   
       [EventHandler] public void OnInitialised()
      
      {

         double[] fqe = new double[2] { 0.002, 0.01 };
            
         double[] nr = new double[2001]{1.5135,1.5131,1.5126,1.5121,1.5116,1.5111,1.5105,1.51,1.5095,1.5089,1.5084,1.5078,1.5073,1.5068,1.5062,1.5057,1.5052,1.5047,1.5043,1.5038,1.5034,1.503,1.5026,1.5023,1.502,1.5016,1.5013,1.5011,1.5008,1.5005,1.5003,1.5,1.4998,1.4995,1.4993,1.4991,1.4988,1.4986,1.4984,1.4981,1.4979,1.4977,1.4974,1.4972,1.4969,1.4967,1.4965,1.4962,1.496,1.4958,1.4955,1.4953,1.4951,1.4949,1.4947,1.4945,1.4944,1.4942,1.494,1.4939,1.4937,1.4935,1.4934,1.4932,1.4931,1.4929,1.4928,1.4927,1.4925,1.4924,1.4923,1.4921,1.492,1.4919,1.4917,1.4916,1.4915,1.4914,1.4912,1.4911,1.491,1.4908,1.4907,1.4906,1.4904,1.4903,1.4902,1.49,1.4899,1.4897,1.4896,1.4894,1.4893,1.4891,1.489,1.4888,1.4887,1.4885,1.4883,1.4882,1.488,1.4878,1.4876,1.4874,1.4873,1.4871,1.4869,1.4867,1.4864,1.4862,1.486,1.4858,1.4856,1.4853,1.4851,1.4848,1.4846,1.4843,1.4841,1.4838,1.4835,1.4833,1.483,1.4827,1.4825,1.4822,1.4819,1.4816,1.4813,1.481,1.4807,1.4804,1.4801,1.4797,1.4794,1.4791,1.4788,1.4784,1.4781,1.4778,1.4774,1.4771,1.4767,1.4764,1.476,1.4757,1.4753,1.475,1.4746,1.4743,1.4739,1.4735,1.4732,1.4728,1.4724,1.472,1.4716,1.4713,1.4709,1.4705,1.4701,1.4697,1.4693,1.4689,1.4685,1.4681,1.4678,1.4674,1.467,1.4666,1.4662,1.4658,1.4654,1.465,1.4647,1.4643,1.4639,1.4635,1.4632,1.4628,1.4624,1.462,1.4617,1.4613,1.461,1.4606,1.4602,1.4599,1.4596,1.4592,1.4589,1.4586,1.4583,1.4579,1.4576,1.4573,1.457,1.4568,1.4565,1.4562,1.4559,1.4556,1.4554,1.4551,1.4548,1.4546,1.4543,1.4541,1.4538,1.4536,1.4533,1.4531,1.4528,1.4526,1.4524,1.4521,1.4519,1.4517,1.4515,1.4513,1.4511,1.4508,1.4506,1.4504,1.4503,1.4501,1.4499,1.4497,1.4496,1.4494,1.4492,1.4491,1.449,1.4488,1.4487,1.4486,1.4485,1.4483,1.4482,1.4481,1.4481,1.448,1.4479,1.4478,1.4477,1.4476,1.4476,1.4475,1.4474,1.4474,1.4473,1.4473,1.4472,1.4472,1.4471,1.4471,1.447,1.447,1.4469,1.4469,1.4468,1.4468,1.4467,1.4467,1.4467,1.4466,1.4466,1.4465,1.4465,1.4464,1.4464,1.4463,1.4463,1.4462,1.4462,1.4461,1.4461,1.446,1.4459,1.4459,1.4458,1.4458,1.4457,1.4456,1.4456,1.4455,1.4454,1.4454,1.4453,1.4452,1.4451,1.4451,1.445,1.4449,1.4449,1.4448,1.4447,1.4446,1.4445,1.4445,1.4444,1.4443,1.4442,1.4441,1.444,1.4438,1.4437,1.4436,1.4435,1.4433,1.4432,1.4431,1.4429,1.4428,1.4426,1.4425,1.4423,1.4422,1.442,1.4418,1.4416,1.4415,1.4413,1.4411,1.4409,1.4407,1.4405,1.4404,1.4402,1.44,1.4398,1.4396,1.4394,1.4392,1.4391,1.4389,1.4387,1.4385,1.4384,1.4382,1.438,1.4379,1.4377,1.4376,1.4374,1.4373,1.4371,1.437,1.4368,1.4367,1.4366,1.4364,1.4363,1.4361,1.436,1.4359,1.4357,1.4356,1.4355,1.4354,1.4352,1.4351,1.435,1.4349,1.4348,1.4348,1.4347,1.4346,1.4345,1.4345,1.4344,1.4343,1.4343,1.4342,1.4342,1.4342,1.4341,1.4341,1.4341,1.4341,1.4341,1.434,1.434,1.434,1.434,1.4341,1.4341,1.4341,1.4341,1.4341,1.4342,1.4342,1.4342,1.4342,1.4343,1.4343,1.4343,1.4344,1.4344,1.4344,1.4345,1.4345,1.4345,1.4346,1.4346,1.4346,1.4346,1.4347,1.4347,1.4347,1.4347,1.4347,1.4347,1.4347,1.4347,1.4347,1.4347,1.4347,1.4347,1.4347,1.4347,1.4347,1.4347,1.4347,1.4347,1.4347,1.4348,1.4348,1.4348,1.4348,1.4348,1.4348,1.4348,1.4348,1.4348,1.4348,1.4348,1.4348,1.4348,1.4348,1.4348,1.4348,1.4348,1.4348,1.4348,1.4348,1.4347,1.4347,1.4347,1.4347,1.4347,1.4347,1.4347,1.4347,1.4347,1.4347,1.4347,1.4346,1.4346,1.4346,1.4346,1.4346,1.4346,1.4346,1.4346,1.4345,1.4345,1.4345,1.4345,1.4345,1.4345,1.4344,1.4344,1.4344,1.4344,1.4344,1.4343,1.4343,1.4343,1.4343,1.4342,1.4342,1.4342,1.4341,1.4341,1.4341,1.4341,1.434,1.434,1.434,1.434,1.4339,1.4339,1.4339,1.4338,1.4338,1.4338,1.4337,1.4337,1.4337,1.4337,1.4336,1.4336,1.4336,1.4335,1.4335,1.4335,1.4335,1.4334,1.4334,1.4334,1.4334,1.4333,1.4333,1.4333,1.4332,1.4332,1.4332,1.4331,1.4331,1.4331,1.433,1.433,1.4329,1.4329,1.4329,1.4328,1.4328,1.4327,1.4327,1.4327,1.4326,1.4326,1.4325,1.4325,1.4324,1.4324,1.4324,1.4323,1.4323,1.4322,1.4322,1.4322,1.4321,1.4321,1.432,1.432,1.432,1.4319,1.4319,1.4318,1.4318,1.4317,1.4317,1.4316,1.4316,1.4316,1.4315,1.4315,1.4314,1.4313,1.4313,1.4312,1.4312,1.4311,1.4311,1.431,1.431,1.4309,1.4309,1.4308,1.4307,1.4307,1.4306,1.4306,1.4305,1.4304,1.4304,1.4303,1.4302,1.4302,1.4301,1.43,1.43,1.4299,1.4298,1.4298,1.4297,1.4296,1.4296,1.4295,1.4294,1.4293,1.4293,1.4292,1.4291,1.429,1.429,1.4289,1.4288,1.4287,1.4286,1.4286,1.4285,1.4284,1.4283,1.4282,1.4281,1.4281,1.428,1.4279,1.4278,1.4277,1.4276,1.4275,1.4274,1.4273,1.4273,1.4272,1.4271,1.427,1.4269,1.4268,1.4267,1.4266,1.4265,1.4264,1.4264,1.4263,1.4262,1.4261,1.426,1.4259,1.4258,1.4257,1.4256,1.4255,1.4254,1.4253,1.4252,1.4251,1.425,1.4249,1.4248,1.4247,1.4246,1.4245,1.4244,1.4243,1.4241,1.424,1.4239,1.4238,1.4237,1.4236,1.4235,1.4234,1.4233,1.4232,1.4231,1.4229,1.4228,1.4227,1.4226,1.4225,1.4224,1.4223,1.4222,1.4221,1.4219,1.4218,1.4217,1.4216,1.4215,1.4214,1.4212,1.4211,1.421,1.4209,1.4208,1.4207,1.4205,1.4204,1.4203,1.4202,1.4201,1.42,1.4198,1.4197,1.4196,1.4195,1.4194,1.4192,1.4191,1.419,1.4189,1.4188,1.4187,1.4185,1.4184,1.4183,1.4182,1.4181,1.418,1.4178,1.4177,1.4176,1.4175,1.4174,1.4172,1.4171,1.417,1.4169,1.4168,1.4167,1.4165,1.4164,1.4163,1.4162,1.4161,1.416,1.4158,1.4157,1.4156,1.4155,1.4154,1.4153,1.4151,1.415,1.4149,1.4148,1.4147,1.4146,1.4145,1.4144,1.4143,1.4141,1.414,1.4139,1.4138,1.4137,1.4136,1.4135,1.4134,1.4133,1.4131,1.413,1.4129,1.4128,1.4127,1.4126,1.4125,1.4124,1.4122,1.4121,1.412,1.4119,1.4118,1.4117,1.4116,1.4115,1.4114,1.4113,1.4112,1.4111,1.4109,1.4108,1.4107,1.4106,1.4105,1.4104,1.4103,1.4102,1.4101,1.41,1.4099,1.4098,1.4097,1.4096,1.4095,1.4094,1.4093,1.4091,1.409,1.4089,1.4088,1.4087,1.4086,1.4085,1.4084,1.4083,1.4082,1.4081,1.408,1.4079,1.4078,1.4077,1.4076,1.4075,1.4074,1.4073,1.4072,1.4071,1.407,1.4069,1.4068,1.4067,1.4066,1.4065,1.4064,1.4063,1.4062,1.4061,1.406,1.4059,1.4058,1.4057,1.4056,1.4055,1.4053,1.4052,1.4051,1.405,1.4049,1.4048,1.4047,1.4046,1.4045,1.4044,1.4043,1.4042,1.4041,1.404,1.4039,1.4037,1.4036,1.4035,1.4034,1.4033,1.4032,1.4031,1.403,1.4029,1.4028,1.4027,1.4026,1.4025,1.4024,1.4023,1.4022,1.4021,1.4019,1.4018,1.4017,1.4016,1.4015,1.4014,1.4013,1.4012,1.4011,1.401,1.4009,1.4008,1.4007,1.4006,1.4005,1.4004,1.4003,1.4002,1.4,1.3999,1.3998,1.3997,1.3996,1.3995,1.3994,1.3993,1.3992,1.3991,1.399,1.3989,1.3988,1.3987,1.3985,1.3984,1.3983,1.3982,1.3981,1.398,1.3979,1.3978,1.3977,1.3976,1.3975,1.3974,1.3973,1.3972,1.3971,1.397,1.3969,1.3968,1.3967,1.3966,1.3965,1.3964,1.3963,1.3962,1.3961,1.396,1.3959,1.3958,1.3957,1.3956,1.3955,1.3954,1.3953,1.3952,1.3951,1.395,1.3948,1.3947,1.3946,1.3945,1.3944,1.3943,1.3942,1.3941,1.394,1.3939,1.3938,1.3937,1.3936,1.3935,1.3934,1.3933,1.3932,1.3931,1.393,1.3929,1.3928,1.3927,1.3926,1.3925,1.3924,1.3923,1.3922,1.3921,1.392,1.3919,1.3918,1.3917,1.3916,1.3915,1.3914,1.3913,1.3912,1.3911,1.391,1.3909,1.3908,1.3907,1.3906,1.3905,1.3904,1.3903,1.3902,1.3901,1.39,1.3899,1.3898,1.3897,1.3895,1.3894,1.3893,1.3892,1.3891,1.389,1.3889,1.3888,1.3887,1.3886,1.3885,1.3884,1.3883,1.3882,1.3881,1.388,1.3878,1.3877,1.3876,1.3875,1.3874,1.3873,1.3872,1.3871,1.387,1.3869,1.3868,1.3867,1.3866,1.3865,1.3864,1.3862,1.3861,1.386,1.3859,1.3858,1.3857,1.3856,1.3854,1.3853,1.3852,1.3851,1.385,1.3849,1.3847,1.3846,1.3845,1.3844,1.3843,1.3841,1.384,1.3839,1.3838,1.3836,1.3835,1.3834,1.3833,1.3831,1.383,1.3829,1.3827,1.3826,1.3825,1.3824,1.3822,1.3821,1.382,1.3818,1.3817,1.3816,1.3815,1.3813,1.3812,1.3811,1.3809,1.3808,1.3807,1.3805,1.3804,1.3803,1.3801,1.38,1.3798,1.3797,1.3795,1.3794,1.3793,1.3791,1.379,1.3788,1.3787,1.3785,1.3784,1.3782,1.3781,1.3779,1.3778,1.3776,1.3775,1.3773,1.3772,1.377,1.3769,1.3767,1.3766,1.3764,1.3763,1.3761,1.376,1.3758,1.3756,1.3755,1.3753,1.3752,1.375,1.3749,1.3747,1.3745,1.3744,1.3742,1.3741,1.3739,1.3737,1.3736,1.3734,1.3733,1.3731,1.3729,1.3728,1.3726,1.3724,1.3723,1.3721,1.3719,1.3718,1.3716,1.3715,1.3713,1.3711,1.371,1.3708,1.3706,1.3705,1.3703,1.3702,1.37,1.3698,1.3697,1.3695,1.3694,1.3692,1.369,1.3689,1.3687,1.3686,1.3684,1.3682,1.3681,1.3679,1.3678,1.3676,1.3674,1.3673,1.3671,1.367,1.3668,1.3666,1.3665,1.3663,1.3661,1.366,1.3658,1.3656,1.3655,1.3653,1.3651,1.365,1.3648,1.3646,1.3645,1.3643,1.3641,1.364,1.3638,1.3636,1.3635,1.3633,1.3631,1.363,1.3628,1.3627,1.3625,1.3623,1.3622,1.362,1.3618,1.3617,1.3615,1.3613,1.3612,1.361,1.3608,1.3607,1.3605,1.3603,1.3602,1.36,1.3599,1.3597,1.3595,1.3594,1.3592,1.359,1.3589,1.3587,1.3586,1.3584,1.3582,1.3581,1.3579,1.3578,1.3576,1.3575,1.3573,1.3571,1.357,1.3568,1.3567,1.3565,1.3563,1.3562,1.356,1.3558,1.3557,1.3555,1.3553,1.3552,1.355,1.3549,1.3547,1.3545,1.3544,1.3542,1.354,1.3539,1.3537,1.3535,1.3534,1.3532,1.3531,1.3529,1.3527,1.3526,1.3524,1.3523,1.3521,1.3519,1.3518,1.3516,1.3515,1.3513,1.3512,1.351,1.3508,1.3507,1.3505,1.3504,1.3502,1.3501,1.3499,1.3498,1.3496,1.3495,1.3493,1.3492,1.349,1.3489,1.3487,1.3486,1.3484,1.3482,1.3481,1.3479,1.3478,1.3476,1.3475,1.3473,1.3472,1.347,1.3469,1.3467,1.3466,1.3464,1.3463,1.3461,1.346,1.3458,1.3457,1.3455,1.3454,1.3452,1.3451,1.3449,1.3448,1.3446,1.3445,1.3443,1.3442,1.344,1.3439,1.3437,1.3436,1.3435,1.3433,1.3432,1.343,1.3429,1.3428,1.3426,1.3425,1.3423,1.3422,1.3421,1.3419,1.3418,1.3417,1.3415,1.3414,1.3413,1.3411,1.341,1.3409,1.3407,1.3406,1.3405,1.3403,1.3402,1.3401,1.3399,1.3398,1.3397,1.3396,1.3394,1.3393,1.3392,1.3391,1.3389,1.3388,1.3387,1.3386,1.3384,1.3383,1.3382,1.3381,1.338,1.3378,1.3377,1.3376,1.3375,1.3374,1.3373,1.3371,1.337,1.3369,1.3368,1.3367,1.3366,1.3365,1.3364,1.3363,1.3362,1.336,1.3359,1.3358,1.3357,1.3356,1.3355,1.3354,1.3353,1.3352,1.3351,1.335,1.3349,1.3348,1.3347,1.3346,1.3345,1.3344,1.3343,1.3342,1.3341,1.334,1.3339,1.3338,1.3337,1.3336,1.3335,1.3334,1.3333,1.3332,1.3331,1.333,1.3329,1.3328,1.3327,1.3326,1.3325,1.3324,1.3323,1.3322,1.3322,1.3321,1.332,1.3319,1.3318,1.3317,1.3316,1.3315,1.3314,1.3314,1.3313,1.3312,1.3311,1.331,1.3309,1.3309,1.3308,1.3307,1.3306,1.3305,1.3305,1.3304,1.3303,1.3302,1.3301,1.3301,1.33,1.3299,1.3298,1.3297,1.3296,1.3296,1.3295,1.3294,1.3293,1.3292,1.3292,1.3291,1.329,1.3289,1.3288,1.3287,1.3286,1.3286,1.3285,1.3284,1.3283,1.3282,1.3281,1.3281,1.328,1.3279,1.3278,1.3277,1.3277,1.3276,1.3275,1.3274,1.3274,1.3273,1.3272,1.3271,1.3271,1.327,1.3269,1.3269,1.3268,1.3267,1.3266,1.3266,1.3265,1.3264,1.3264,1.3263,1.3262,1.3262,1.3261,1.326,1.326,1.3259,1.3258,1.3257,1.3257,1.3256,1.3255,1.3255,1.3254,1.3253,1.3252,1.3252,1.3251,1.325,1.325,1.3249,1.3248,1.3247,1.3247,1.3246,1.3245,1.3245,1.3244,1.3243,1.3242,1.3242,1.3241,1.324,1.324,1.3239,1.3238,1.3238,1.3237,1.3236,1.3236,1.3235,1.3234,1.3234,1.3233,1.3232,1.3232,1.3231,1.3231,1.323,1.3229,1.3229,1.3228,1.3227,1.3227,1.3226,1.3225,1.3225,1.3224,1.3224,1.3223,1.3222,1.3222,1.3221,1.322,1.322,1.3219,1.3218,1.3218,1.3217,1.3216,1.3216,1.3215,1.3214,1.3213,1.3213,1.3212,1.3211,1.3211,1.321,1.3209,1.3208,1.3208,1.3207,1.3206,1.3206,1.3205,1.3204,1.3204,1.3203,1.3202,1.3202,1.3201,1.32,1.32,1.3199,1.3199,1.3198,1.3197,1.3197,1.3196,1.3195,1.3195,1.3194,1.3193,1.3193,1.3192,1.3191,1.3191,1.319,1.3189,1.3189,1.3188,1.3187,1.3186,1.3186,1.3185,1.3184,1.3183,1.3183,1.3182,1.3181,1.318,1.318,1.3179,1.3178,1.3177,1.3177,1.3176,1.3175,1.3174,1.3174,1.3173,1.3172,1.3171,1.3171,1.317,1.3169,1.3168,1.3167,1.3167,1.3166,1.3165,1.3164,1.3163,1.3162,1.3162,1.3161,1.316,1.3159,1.3158,1.3157,1.3157,1.3156,1.3155,1.3154,1.3153,1.3152,1.3152,1.3151,1.315,1.3149,1.3148,1.3147,1.3146,1.3145,1.3145,1.3144,1.3143,1.3142,1.3141,1.314,1.3139,1.3138,1.3137,1.3136,1.3135,1.3134,1.3133,1.3132,1.3131,1.313,1.3129,1.3128,1.3127,1.3126,1.3125,1.3124,1.3123,1.3122,1.3121,1.312,1.3119,1.3118,1.3117,1.3116,1.3115,1.3114,1.3113,1.3111,1.311,1.3109,1.3108,1.3107,1.3106,1.3105,1.3104,1.3103,1.3102,1.3101,1.31,1.3098,1.3097,1.3096,1.3095,1.3094,1.3093,1.3092,1.3091,1.3089,1.3088,1.3087,1.3086,1.3085,1.3084,1.3083,1.3081,1.308,1.3079,1.3078,1.3077,1.3075,1.3074,1.3073,1.3072,1.3071,1.307,1.3068,1.3067,1.3066,1.3065,1.3064,1.3062,1.3061,1.306,1.3059,1.3058,1.3057,1.3055,1.3054,1.3053,1.3052,1.3051,1.305,1.3048,1.3047,1.3046,1.3045,1.3044,1.3042,1.3041,1.304,1.3039,1.3038,1.3037,1.3035,1.3034,1.3033,1.3032,1.3031,1.303,1.3028,1.3027,1.3026,1.3025,1.3023,1.3022,1.3021,1.302,1.3019,1.3017,1.3016,1.3015,1.3014,1.3012,1.3011,1.301,1.3009,1.3007,1.3006,1.3005,1.3004,1.3003,1.3002,1.3,1.2999,1.2998,1.2997,1.2996,1.2994,1.2993,1.2992,1.2991,1.299,1.2989,1.2987,1.2986,1.2985,1.2984,1.2982,1.2981,1.298,1.2979,1.2978,1.2976,1.2975,1.2974,1.2973,1.2971,1.297,1.2969,1.2968,1.2967,1.2965,1.2964,1.2963,1.2962,1.296,1.2959,1.2958,1.2957,1.2956,1.2955,1.2953,1.2952,1.2951,1.295,1.2949,1.2948,1.2946,1.2945,1.2944,1.2943,1.2942,1.294,1.2939,1.2938,1.2937,1.2935,1.2934,1.2933,1.2932,1.2931,1.2929,1.2928,1.2927,1.2926,1.2924,1.2923,1.2922,1.2921,1.2919,1.2918,1.2917,1.2916,1.2914,1.2913,1.2912,1.2911,1.2909,1.2908,1.2907,1.2906,1.2904,1.2903,1.2902,1.2901,1.29,1.2898,1.2897,1.2896,1.2895,1.2894,1.2892,1.2891,1.289,1.2889,1.2888,1.2887,1.2885,1.2884,1.2883,1.2882,1.2881,1.288,1.2879,1.2878,1.2876,1.2875,1.2874,1.2873,1.2872,1.2871,1.287,1.2869,1.2867,1.2866,1.2865,1.2864,1.2863,1.2862,1.2861,1.286,1.2858,1.2857,1.2856,1.2855,1.2854,1.2853,1.2852,1.2851,1.285,1.2848,1.2847,1.2846,1.2845,1.2844,1.2843,1.2842,1.2841,1.284,1.2839,1.2838,1.2837,1.2835,1.2834,1.2833,1.2832,1.2831,1.283,1.2829,1.2828,1.2827,1.2826,1.2825,1.2824,1.2823,1.2822,1.2821,1.282,1.2818,1.2817,1.2816,1.2815,1.2814,1.2813,1.2812,1.2811,1.281,1.2809,1.2808,1.2807,1.2806,1.2805,1.2804,1.2803,1.2802,1.2801,1.2801,1.28,1.2799,1.2798,1.2797,1.2796,1.2795,1.2795,1.2794,1.2793,1.2792,1.2792,1.2791,1.279,1.279,1.2789,1.2788,1.2787,1.2787,1.2786,1.2785,1.2785,1.2784,1.2783,1.2782,1.2782,1.2781,1.278,1.2779,1.2778,1.2777,1.2777,1.2776,1.2775,1.2774,1.2773,1.2772,1.2771,1.277,1.2769,1.2768,1.2767,1.2766,1.2765,1.2764,1.2763,1.2762,1.2761,1.276,1.2759,1.2759,1.2758,1.2757,1.2756,1.2755,1.2754,1.2753,1.2753,1.2752,1.2751,1.275,1.2749,1.2749,1.2748,1.2747,1.2746,1.2745,1.2745,1.2744,1.2743,1.2743,1.2742,1.2741,1.2741,1.274,1.274,1.2739,1.2739,1.2738,1.2738};
         double[] Kdm = new double[2001] { 110,104,98,92.4,87.1,82.3,78.1,74,70.1,66.5,63,59.5,56.2,53,50,47.2,44.6,42.2,40,37.8,35.7,33.6,31.7,29.9,28.3,26.8,25.4,24,22.8,21.5,20.2,19,17.9,16.8,15.8,14.8,13.9,13.1,12.3,11.6,11,10.4,9.92,9.41,8.95,8.51,8.09,7.64,7.27,6.94,6.66,6.42,6.22,6.01,5.78,5.57,5.37,5.17,4.95,4.76,4.58,4.42,4.26,4.12,4.01,3.95,3.85,3.78,3.67,3.55,3.46,3.36,3.28,3.18,3.1,3.05,2.98,2.95,2.91,2.87,2.8,2.78,2.75,2.73,2.7,2.68,2.66,2.63,2.61,2.59,2.57,2.55,2.54,2.52,2.5,2.49,2.47,2.46,2.44,2.43,2.42,2.41,2.39,2.38,2.37,2.37,2.36,2.35,2.34,2.33,2.33,2.32,2.32,2.31,2.31,2.31,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.31,2.31,2.31,2.31,2.31,2.32,2.32,2.32,2.32,2.33,2.33,2.33,2.34,2.34,2.35,2.35,2.35,2.36,2.36,2.37,2.37,2.38,2.38,2.39,2.4,2.4,2.41,2.41,2.42,2.42,2.43,2.44,2.44,2.45,2.45,2.46,2.47,2.47,2.48,2.49,2.49,2.5,2.51,2.51,2.52,2.53,2.53,2.54,2.55,2.55,2.56,2.56,2.57,2.58,2.58,2.59,2.6,2.6,2.61,2.61,2.62,2.63,2.63,2.64,2.64,2.65,2.65,2.66,2.66,2.67,2.67,2.68,2.68,2.69,2.69,2.69,2.7,2.7,2.7,2.71,2.71,2.71,2.72,2.72,2.72,2.72,2.73,2.73,2.73,2.73,2.73,2.73,2.73,2.73,2.72,2.74,2.73,2.72,2.71,2.7,2.7,2.69,2.69,2.69,2.68,2.68,2.68,2.68,2.67,2.67,2.67,2.67,2.67,2.67,2.68,2.67,2.68,2.68,2.68,2.67,2.66,2.67,2.67,2.67,2.66,2.66,2.67,2.67,2.68,2.69,2.68,2.7,2.71,2.72,2.72,2.73,2.74,2.74,2.75,2.76,2.78,2.79,2.82,2.84,2.87,2.88,2.9,2.92,2.94,2.95,2.97,2.98,2.98,2.94,2.89,2.86,2.88,2.89,2.89,2.89,2.9,2.89,2.88,2.9,2.93,2.97,3.01,3.05,3.08,3.11,3.13,3.13,3.1,3.05,2.98,2.94,2.92,2.93,2.95,2.98,3.03,3.05,3.07,3.09,3.1,3.09,3.09,3.08,3.09,3.07,3.07,3.07,3.07,3.09,3.09,3.11,3.14,3.15,3.16,3.19,3.23,3.27,3.3,3.36,3.42,3.48,3.53,3.58,3.63,3.71,3.78,3.85,3.93,3.99,4.07,4.16,4.24,4.32,4.4,4.48,4.56,4.64,4.71,4.78,4.85,4.91,4.97,5.03,5.07,5.13,5.18,5.22,5.27,5.32,5.36,5.4,5.44,5.46,5.48,5.5,5.52,5.55,5.56,5.58,5.58,5.6,5.61,5.64,5.65,5.68,5.68,5.69,5.68,5.69,5.71,5.72,5.72,5.72,5.73,5.74,5.74,5.75,5.75,5.74,5.76,5.77,5.78,5.79,5.8,5.81,5.81,5.82,5.83,5.82,5.83,5.85,5.88,5.9,5.91,5.92,5.94,5.96,5.96,5.97,5.98,5.99,5.99,6.02,6.01,6.03,6.01,6.02,6.02,6.03,6.03,6.04,6.03,6.01,5.99,5.99,5.98,5.97,5.97,5.97,5.95,5.95,5.94,5.93,5.93,5.93,5.91,5.9,5.88,5.88,5.88,5.86,5.84,5.83,5.82,5.81,5.8,5.79,5.78,5.78,5.78,5.77,5.76,5.77,5.76,5.76,5.74,5.74,5.76,5.76,5.75,5.75,5.75,5.75,5.74,5.74,5.75,5.74,5.74,5.74,5.73,5.73,5.73,5.72,5.72,5.72,5.7,5.69,5.7,5.7,5.71,5.73,5.73,5.74,5.74,5.75,5.75,5.74,5.75,5.75,5.75,5.75,5.75,5.74,5.74,5.75,5.74,5.76,5.75,5.75,5.75,5.73,5.74,5.72,5.73,5.71,5.7,5.7,5.7,5.69,5.69,5.67,5.66,5.63,5.61,5.59,5.59,5.56,5.55,5.53,5.52,5.51,5.49,5.46,5.45,5.44,5.43,5.41,5.39,5.38,5.38,5.36,5.35,5.33,5.32,5.3,5.29,5.28,5.27,5.26,5.25,5.25,5.23,5.22,5.21,5.2,5.21,5.2,5.19,5.19,5.18,5.18,5.18,5.17,5.15,5.14,5.14,5.13,5.12,5.11,5.13,5.11,5.1,5.1,5.11,5.11,5.11,5.13,5.14,5.13,5.15,5.18,5.19,5.2,5.24,5.26,5.27,5.29,5.34,5.37,5.39,5.43,5.45,5.49,5.52,5.56,5.61,5.65,5.7,5.74,5.74,5.64,5.69,5.72,5.76,5.8,5.85,5.88,5.92,5.97,6.02,6.06,6.12,6.17,6.21,6.27,6.32,6.38,6.43,6.49,6.54,6.58,6.62,6.67,6.73,6.77,6.81,6.86,6.91,6.96,7.01,7.05,7.09,7.14,7.16,7.2,7.23,7.27,7.32,7.34,7.36,7.4,7.44,7.47,7.51,7.53,7.56,7.58,7.6,7.63,7.65,7.67,7.69,7.7,7.71,7.72,7.73,7.73,7.71,7.7,7.7,7.67,7.64,7.62,7.59,7.56,7.52,7.48,7.45,7.44,7.41,7.38,7.36,7.35,7.33,7.33,7.33,7.3,7.3,7.3,7.29,7.29,7.29,7.28,7.28,7.26,7.25,7.24,7.23,7.21,7.19,7.16,7.14,7.11,7.1,7.07,7.04,7,6.97,6.93,6.89,6.84,6.79,6.76,6.73,6.69,6.66,6.61,6.57,6.55,6.52,6.51,6.48,6.48,6.48,6.49,6.5,6.49,6.46,6.44,6.43,6.41,6.42,6.4,6.38,6.37,6.37,6.35,6.32,6.31,6.31,6.28,6.28,6.27,6.26,6.24,6.23,6.22,6.23,6.22,6.21,6.19,6.19,6.18,6.16,6.14,6.14,6.12,6.1,6.09,6.06,6.06,6.05,6.04,6.04,6.01,6,5.99,6,5.98,5.95,5.95,5.93,5.91,5.89,5.87,5.83,5.79,5.77,5.73,5.68,5.68,5.66,5.65,5.62,5.59,5.57,5.56,5.55,5.55,5.54,5.52,5.51,5.51,5.49,5.47,5.46,5.45,5.45,5.44,5.44,5.44,5.45,5.47,5.46,5.45,5.45,5.41,5.38,5.28,5.23,5.2,5.17,5.14,5.12,5.11,5.13,5.14,5.17,5.18,5.19,5.18,5.2,5.2,5.2,5.22,5.24,5.3,5.32,5.38,5.44,5.49,5.56,5.63,5.69,5.76,5.83,5.91,6,6.09,6.19,6.33,6.45,6.58,6.71,6.84,6.97,7.11,7.24,7.39,7.51,7.64,7.77,7.87,7.98,8.07,8.15,8.22,8.29,8.35,8.45,8.52,8.58,8.67,8.72,8.76,8.82,8.86,8.91,8.94,8.95,8.96,8.98,9.02,9.04,9.04,9.03,9.03,9.05,9.05,9.04,9.04,9.04,9.04,9.02,9.02,9.01,8.97,8.97,8.95,8.96,8.94,8.92,8.91,8.9,8.89,8.88,8.87,8.86,8.85,8.86,8.86,8.88,8.87,8.87,8.86,8.83,8.84,8.86,8.86,8.83,8.84,8.84,8.83,8.81,8.82,8.81,8.8,8.79,8.79,8.8,8.77,8.75,8.76,8.76,8.75,8.76,8.78,8.79,8.8,8.81,8.85,8.87,8.89,8.91,8.94,8.98,8.99,9,9.03,9.08,9.11,9.14,9.17,9.21,9.26,9.3,9.36,9.41,9.45,9.52,9.58,9.64,9.69,9.76,9.85,9.95,10,10.1,10.3,10.4,10.5,10.6,10.8,10.9,11,11.2,11.4,11.5,11.7,11.8,12,12.2,12.3,12.5,12.7,12.9,13.1,13.3,13.5,13.6,13.8,14,14.2,14.4,14.6,14.8,15,15.2,15.3,15.5,15.7,15.9,16.1,16.2,16.4,16.5,16.7,16.8,16.9,17,17.1,17.2,17.3,17.3,17.4,17.5,17.6,17.6,17.7,17.7,17.8,17.8,17.9,17.9,18,18,18.1,18.1,18.1,18.2,18.3,18.3,18.4,18.4,18.5,18.5,18.6,18.6,18.7,18.7,18.8,18.8,18.9,18.9,19,19,19.1,19.1,19.2,19.2,19.3,19.3,19.3,19.4,19.4,19.4,19.4,19.5,19.5,19.5,19.6,19.6,19.6,19.6,19.7,19.7,19.7,19.7,19.7,19.7,19.7,19.8,19.8,19.8,19.8,19.8,19.8,19.9,19.9,19.9,19.9,19.9,19.9,20,20,20,20,20.1,20.1,20.1,20.2,20.2,20.2,20.2,20.2,20.2,20.3,20.3,20.3,20.3,20.3,20.3,20.3,20.3,20.3,20.3,20.3,20.3,20.3,20.3,20.3,20.3,20.3,20.3,20.3,20.2,20.2,20.2,20.2,20.1,20.1,20.1,20,20,20,19.9,19.9,19.8,19.8,19.7,19.6,19.6,19.5,19.5,19.4,19.4,19.3,19.2,19.2,19.1,19.1,19,18.9,18.9,18.8,18.7,18.7,18.6,18.6,18.5,18.5,18.4,18.3,18.3,18.2,18.2,18.1,18.1,18,18,17.9,17.9,17.8,17.8,17.8,17.7,17.7,17.7,17.7,17.6,17.6,17.6,17.6,17.6,17.7,17.7,17.7,17.8,17.9,18,18,18.1,18.3,18.4,18.5,18.7,18.8,19,19.1,19.3,19.5,19.7,19.9,20.2,20.4,20.7,20.9,21.1,21.4,21.6,21.9,22.1,22.4,22.6,22.9,23.1,23.4,23.6,23.9,24.1,24.3,24.6,24.8,25,25.2,25.4,25.6,25.8,26.1,26.3,26.4,26.6,26.7,26.9,27,27.2,27.3,27.4,27.5,27.6,27.8,27.9,28,28.2,28.4,28.5,28.6,28.8,29,29.1,29.2,29.4,29.5,29.6,29.7,29.8,30,30.1,30.2,30.3,30.4,30.5,30.6,30.7,30.7,30.8,30.8,30.8,30.7,30.7,30.7,30.6,30.5,30.5,30.3,30.3,30.2,30.2,30,30,30,29.9,29.9,29.8,29.8,29.8,29.7,29.8,29.8,29.8,29.8,29.9,29.9,30,30,30.1,30.1,30.1,30.2,30.2,30.2,30.3,30.3,30.3,30.3,30.3,30.2,30.2,30.1,30.1,30,29.9,29.8,29.8,29.8,29.7,29.6,29.5,29.3,29.3,29.2,29.1,29,28.9,28.8,28.7,28.7,28.7,28.7,28.6,28.5,28.5,28.5,28.4,28.3,28.2,28.2,28.2,28.1,28,28,28,27.9,27.9,27.9,27.8,27.8,27.8,27.8,27.8,27.8,27.8,27.9,27.9,27.8,27.8,27.8,27.8,27.8,27.8};
         double[] Kab = new double[2001] { 0.064881,0.066732,0.068551,0.069982,0.0709,0.071333,0.07132,0.07126,0.071223,0.071228,0.071491,0.071888,0.072018,0.071827,0.071493,0.071132,0.070763,0.070437,0.070094,0.06984,0.069819,0.070054,0.070281,0.070503,0.070473,0.070528,0.070809,0.071312,0.071622,0.071905,0.072449,0.073091,0.073652,0.074047,0.074335,0.074542,0.074691,0.074653,0.07457,0.074285,0.073794,0.072818,0.071622,0.070459,0.069105,0.067568,0.066026,0.064492,0.062668,0.060755,0.058775,0.056778,0.054732,0.052844,0.051125,0.049573,0.048139,0.046801,0.045645,0.044691,0.043873,0.043162,0.042653,0.042206,0.041774,0.041297,0.040911,0.040571,0.040302,0.040009,0.039727,0.039521,0.039292,0.039035,0.038773,0.038523,0.03826,0.037881,0.03751,0.037149,0.036776,0.0363,0.035761,0.03521,0.034583,0.033909,0.033184,0.032377,0.031519,0.030584,0.029662,0.028699,0.027692,0.02664,0.02559,0.024517,0.023428,0.022328,0.021224,0.020137,0.019048,0.01798,0.016943,0.015923,0.014934,0.013979,0.01305,0.012154,0.011296,0.01048,0.0097008,0.008954,0.0082461,0.00758,0.0069574,0.0063867,0.005868,0.0054015,0.0049913,0.0046349,0.0043338,0.004085,0.0038874,0.0037421,0.0036525,0.0036118,0.0036193,0.0036728,0.0037697,0.0039032,0.004069,0.0042637,0.0044843,0.00473,0.0049935,0.0052728,0.0055645,0.0058662,0.0061706,0.0064792,0.0067864,0.00709,0.007388,0.0076742,0.0079483,0.0082083,0.0084536,0.008685,0.0089037,0.0091119,0.0093094,0.0095001,0.0096821,0.0098639,0.01004,0.010214,0.010386,0.010556,0.010724,0.010889,0.011048,0.011217,0.011402,0.011605,0.011827,0.012075,0.01234,0.012628,0.012933,0.01326,0.013598,0.013947,0.014301,0.014658,0.01501,0.015357,0.015693,0.016023,0.01634,0.016648,0.016945,0.017241,0.017527,0.017801,0.018066,0.018325,0.018568,0.0188,0.019019,0.019228,0.019419,0.019599,0.019766,0.019922,0.020066,0.020199,0.020327,0.020458,0.020585,0.020715,0.020854,0.021007,0.021172,0.021348,0.021546,0.021764,0.022003,0.022268,0.022553,0.022859,0.023177,0.023502,0.023842,0.024199,0.024561,0.024917,0.025269,0.025617,0.02595,0.026255,0.02653,0.026786,0.02701,0.027207,0.027379,0.027523,0.027645,0.027739,0.027821,0.027895,0.027978,0.028072,0.028194,0.02836,0.028573,0.028846,0.029181,0.029599,0.030077,0.030634,0.031248,0.031927,0.032659,0.033441,0.034255,0.035101,0.035949,0.036779,0.037588,0.038323,0.039014,0.039631,0.040222,0.040804,0.041418,0.042107,0.04288,0.043808,0.044861,0.046107,0.047495,0.049113,0.050849,0.05273,0.0547,0.056761,0.058868,0.06083,0.06275,0.064472,0.066112,0.067471,0.068675,0.069635,0.070465,0.070995,0.071402,0.071358,0.071127,0.070185,0.068921,0.066576,0.063948,0.060482,0.056858,0.052747,0.048726,0.044707,0.040858,0.037141,0.033671,0.030459,0.027502,0.024787,0.02233,0.020144,0.018173,0.016421,0.014852,0.013471,0.012241,0.011155,0.010193,0.009343,0.0085869,0.007915,0.0073126,0.0067711,0.0062803,0.0058322,0.0054214,0.0050449,0.0046965,0.0043735,0.004072,0.0037922,0.0035302,0.0032856,0.0030575,0.0028435,0.0026434,0.0024563,0.0022809,0.0021168,0.0019636,0.0018206,0.0016869,0.0015628,0.0014468,0.0013388,0.0012386,0.0011459,0.0010591,0.00097828,0.00090409,0.00083609,0.00077289,0.00071503,0.00066162,0.00061235,0.00056764,0.00052722,0.00048994,0.00045636,0.00042566,0.00039812,0.00037316,0.00035104,0.00033141,0.00031371,0.00029841,0.00028315,0.00026796,0.00025289,0.00023795,0.00022319,0.00020864,0.00019431,0.00018026,0.00016649,0.00015306,0.00013998,0.00012729,0.00011501,0.00010319,9.1841e-05,8.1005e-05,7.0709e-05,6.0985e-05,5.1862e-05,4.3372e-05,3.5545e-05,2.8412e-05,2.2003e-05,1.6349e-05,1.1481e-05,7.4298e-06,4.2252e-06,1.8983e-06,4.7969e-07,1.0525e-13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
         double[] Kca = new double[2001] { 0.16734,0.16761,0.16718,0.16721,0.16761,0.1676,0.16751,0.16743,0.16724,0.16668,0.16588,0.16552,0.16545,0.16569,0.16609,0.16619,0.16629,0.16646,0.16662,0.16687,0.16716,0.16754,0.16798,0.16844,0.1686,0.16847,0.16814,0.168,0.16773,0.16741,0.16755,0.16774,0.16791,0.16797,0.16794,0.16797,0.16818,0.16832,0.1687,0.16916,0.16957,0.16968,0.16963,0.1699,0.16991,0.16981,0.16977,0.16973,0.16935,0.16857,0.16744,0.16602,0.16446,0.1629,0.16136,0.15978,0.15822,0.15656,0.15497,0.1533,0.15167,0.14997,0.14832,0.14677,0.14508,0.14349,0.142,0.14055,0.13919,0.13802,0.13701,0.13614,0.13548,0.135,0.13464,0.13437,0.13417,0.13394,0.13375,0.13356,0.13327,0.13279,0.13217,0.13141,0.13042,0.12922,0.12782,0.12631,0.12457,0.12269,0.12066,0.1186,0.11652,0.11441,0.11227,0.11011,0.10793,0.10573,0.1035,0.10126,0.099004,0.096734,0.09445,0.092156,0.089851,0.08753,0.085213,0.082748,0.080151,0.077693,0.075236,0.072871,0.070506,0.067919,0.065332,0.062912,0.060491,0.058036,0.055581,0.053118,0.050654,0.048319,0.045983,0.043744,0.041504,0.039358,0.037213,0.035177,0.033142,0.031232,0.029322,0.027554,0.025785,0.024098,0.022412,0.020824,0.019236,0.017777,0.016318,0.014959,0.013627,0.012361,0.011174,0.0099846,0.0088561,0.0077767,0.0067639,0.0057876,0.0048755,0.0040215,0.0032341,0.002521,0.0018918,0.0012484,0.00073134,0.00036001,0.0001828,6.4871e-05,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
         double[] Kw = new double[2001] {5.8e-05,5.85e-05,5.9e-05,5.99e-05,6.1e-05,6.2e-05,6.3e-05,6.4e-05,6.5e-05,6.6e-05,6.7e-05,6.79e-05,6.9e-05,7.05e-05,7.2e-05,7.31e-05,7.4e-05,7.49e-05,7.6e-05,7.74e-05,7.9e-05,8.06e-05,8.2e-05,8.3e-05,8.4e-05,8.55e-05,8.7e-05,8.8e-05,8.9e-05,9.05e-05,9.2e-05,9.3e-05,9.4e-05,9.55e-05,9.7e-05,9.8e-05,9.9e-05,0.000101,0.000102,0.000103,0.000104,0.000105,0.000106,0.000107,0.000108,0.000109,0.00011,0.000111,0.000112,0.000113,0.000114,0.000115,0.000116,0.000117,0.000118,0.000119,0.00012,0.000121,0.000122,0.000123,0.000124,0.000125,0.000126,0.000127,0.000128,0.000129,0.00013,0.000132,0.000133,0.000134,0.000135,0.000136,0.000138,0.00014,0.000141,0.000142,0.000144,0.000146,0.000148,0.00015,0.000152,0.000154,0.000157,0.00016,0.000162,0.000164,0.000167,0.00017,0.000174,0.000178,0.000181,0.000185,0.000189,0.000193,0.000198,0.000203,0.000209,0.000216,0.000223,0.00023,0.000238,0.000246,0.000255,0.000264,0.000273,0.000282,0.000291,0.0003,0.00031,0.000319,0.000329,0.000339,0.000349,0.000359,0.000368,0.000377,0.000386,0.000396,0.000404,0.000407,0.000409,0.000414,0.000416,0.000411,0.000409,0.000418,0.000427,0.000427,0.000423,0.000424,0.000429,0.000437,0.000445,0.000451,0.000456,0.000463,0.00047,0.000475,0.00048,0.000488,0.000495,0.000498,0.000503,0.000514,0.000527,0.000536,0.000544,0.000553,0.000564,0.000576,0.000588,0.0006,0.000611,0.000622,0.000631,0.000639,0.000646,0.000652,0.000658,0.000665,0.000672,0.000679,0.000686,0.000692,0.000699,0.000708,0.000718,0.000726,0.000734,0.000746,0.000759,0.000773,0.000787,0.000802,0.000819,0.000839,0.000858,0.000875,0.000896,0.000924,0.000952,0.000975,0.001,0.00104,0.00108,0.00112,0.00116,0.0012,0.00125,0.0013,0.00136,0.00141,0.00146,0.00151,0.00157,0.00164,0.0017,0.00176,0.00186,0.00204,0.00222,0.00232,0.00237,0.0024,0.00245,0.00252,0.00259,0.00263,0.00265,0.00267,0.00269,0.0027,0.00272,0.00273,0.00274,0.00275,0.00276,0.00278,0.00279,0.0028,0.00281,0.00282,0.00284,0.00285,0.00287,0.00288,0.00289,0.00291,0.00292,0.00294,0.00296,0.00297,0.00299,0.003,0.00301,0.00302,0.00304,0.00306,0.00308,0.00309,0.00311,0.00313,0.00314,0.00316,0.00318,0.0032,0.00322,0.00324,0.00326,0.00329,0.00332,0.00334,0.00336,0.00339,0.00342,0.00346,0.00351,0.00357,0.00364,0.00371,0.00379,0.00387,0.00393,0.00398,0.00402,0.00405,0.00407,0.00409,0.0041,0.00411,0.00412,0.00414,0.00415,0.00416,0.00417,0.0042,0.00422,0.00425,0.00427,0.00429,0.00432,0.00435,0.00438,0.00442,0.00446,0.0045,0.00455,0.00459,0.00465,0.0047,0.00476,0.00483,0.0049,0.00499,0.00507,0.00515,0.00524,0.00535,0.00547,0.00559,0.00572,0.00586,0.006,0.00615,0.0063,0.00646,0.00663,0.0068,0.00699,0.0072,0.00742,0.00765,0.00789,0.00816,0.00845,0.00876,0.00911,0.00948,0.00987,0.0103,0.0107,0.0112,0.0117,0.0122,0.0127,0.0132,0.0137,0.0143,0.0149,0.0155,0.0162,0.017,0.0179,0.0189,0.0199,0.021,0.0221,0.0231,0.0239,0.0247,0.0253,0.0258,0.0262,0.0265,0.0267,0.0269,0.027,0.0271,0.0272,0.0273,0.0273,0.0274,0.0274,0.0275,0.0275,0.0275,0.0275,0.0276,0.0276,0.0277,0.0277,0.0277,0.0277,0.0277,0.0277,0.0277,0.0277,0.0277,0.0276,0.0276,0.0275,0.0275,0.0275,0.0274,0.0273,0.0272,0.0271,0.027,0.0269,0.0268,0.0266,0.0265,0.0263,0.0262,0.0261,0.0259,0.0256,0.0252,0.0251,0.025,0.0247,0.0245,0.0241,0.0239,0.0237,0.0236,0.0234,0.0232,0.023,0.0228,0.0225,0.0224,0.0224,0.0222,0.022,0.022,0.022,0.022,0.0218,0.0219,0.0219,0.0219,0.022,0.0221,0.0222,0.0223,0.0225,0.0228,0.023,0.0231,0.0233,0.0239,0.0245,0.0248,0.0252,0.0262,0.0277,0.0283,0.0291,0.0311,0.0321,0.033,0.0346,0.0361,0.0366,0.037,0.0379,0.0383,0.0385,0.0391,0.0395,0.0397,0.04,0.0404,0.0406,0.0408,0.0412,0.0413,0.0415,0.042,0.042,0.0422,0.0425,0.0427,0.0428,0.0431,0.0436,0.0437,0.0438,0.0443,0.0445,0.0447,0.0451,0.0453,0.0455,0.0461,0.0466,0.0469,0.0471,0.0471,0.0475,0.0483,0.0487,0.0489,0.0496,0.0501,0.0505,0.0512,0.0515,0.052,0.053,0.0535,0.0539,0.0547,0.0553,0.0557,0.056,0.0565,0.0575,0.0579,0.0583,0.0592,0.0598,0.0601,0.0604,0.0609,0.0619,0.0623,0.0627,0.0636,0.0641,0.0646,0.0656,0.0664,0.0667,0.067,0.0677,0.069,0.0699,0.0704,0.0709,0.0719,0.0736,0.0749,0.0756,0.0763,0.0779,0.0809,0.0829,0.0841,0.0853,0.088,0.0927,0.0958,0.0982,0.101,0.104,0.107,0.111,0.119,0.125,0.128,0.133,0.137,0.141,0.147,0.156,0.164,0.169,0.173,0.182,0.196,0.205,0.211,0.219,0.229,0.239,0.247,0.254,0.27,0.298,0.315,0.327,0.344,0.362,0.379,0.393,0.407,0.418,0.427,0.439,0.454,0.461,0.463,0.466,0.47,0.473,0.476,0.477,0.479,0.48,0.481,0.483,0.484,0.486,0.487,0.487,0.486,0.486,0.484,0.482,0.48,0.479,0.476,0.474,0.471,0.468,0.464,0.46,0.457,0.453,0.448,0.443,0.44,0.436,0.432,0.427,0.422,0.417,0.412,0.407,0.402,0.396,0.392,0.387,0.382,0.376,0.37,0.364,0.358,0.352,0.346,0.34,0.335,0.33,0.324,0.319,0.314,0.309,0.302,0.296,0.29,0.284,0.278,0.272,0.267,0.262,0.257,0.251,0.244,0.239,0.236,0.233,0.23,0.225,0.22,0.215,0.211,0.206,0.202,0.198,0.194,0.19,0.187,0.184,0.182,0.179,0.175,0.172,0.169,0.166,0.164,0.161,0.159,0.156,0.155,0.153,0.152,0.151,0.15,0.148,0.146,0.145,0.144,0.144,0.143,0.143,0.142,0.141,0.141,0.141,0.141,0.141,0.141,0.141,0.141,0.143,0.144,0.144,0.144,0.144,0.146,0.148,0.15,0.152,0.153,0.155,0.156,0.158,0.16,0.163,0.166,0.168,0.169,0.171,0.174,0.178,0.182,0.187,0.189,0.191,0.193,0.197,0.201,0.203,0.205,0.208,0.212,0.217,0.22,0.222,0.225,0.23,0.234,0.235,0.234,0.235,0.24,0.245,0.249,0.253,0.258,0.265,0.272,0.277,0.281,0.289,0.302,0.316,0.327,0.338,0.353,0.377,0.404,0.428,0.45,0.471,0.493,0.52,0.557,0.605,0.652,0.686,0.716,0.754,0.806,0.86,0.898,0.925,0.949,0.977,1.01,1.04,1.07,1.1,1.12,1.13,1.14,1.15,1.16,1.17,1.18,1.19,1.19,1.2,1.2,1.2,1.2,1.21,1.21,1.21,1.21,1.22,1.23,1.23,1.23,1.23,1.23,1.23,1.24,1.24,1.24,1.24,1.25,1.25,1.26,1.26,1.26,1.26,1.27,1.27,1.27,1.27,1.28,1.28,1.28,1.28,1.28,1.28,1.28,1.27,1.27,1.27,1.27,1.27,1.27,1.27,1.26,1.26,1.26,1.26,1.25,1.25,1.24,1.24,1.24,1.24,1.23,1.22,1.22,1.21,1.21,1.21,1.21,1.21,1.2,1.2,1.2,1.2,1.19,1.19,1.18,1.18,1.18,1.17,1.17,1.16,1.16,1.16,1.16,1.16,1.15,1.15,1.14,1.14,1.13,1.13,1.13,1.12,1.12,1.12,1.11,1.11,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.09,1.09,1.09,1.08,1.08,1.08,1.08,1.08,1.08,1.08,1.08,1.08,1.09,1.09,1.1,1.1,1.11,1.11,1.11,1.12,1.12,1.13,1.14,1.15,1.16,1.16,1.17,1.18,1.18,1.19,1.2,1.21,1.22,1.23,1.24,1.25,1.27,1.28,1.3,1.31,1.32,1.34,1.35,1.37,1.39,1.42,1.44,1.47,1.49,1.51,1.53,1.56,1.58,1.61,1.64,1.67,1.7,1.73,1.76,1.79,1.83,1.87,1.91,1.94,1.97,2.01,2.05,2.1,2.15,2.2,2.24,2.28,2.31,2.36,2.42,2.48,2.54,2.59,2.63,2.67,2.7,2.74,2.78,2.83,2.89,2.96,3.03,3.1,3.15,3.18,3.23,3.27,3.32,3.36,3.41,3.45,3.5,3.54,3.6,3.65,3.7,3.75,3.8,3.87,3.93,3.99,4.06,4.13,4.22,4.3,4.39,4.5,4.63,4.74,4.9,5.09,5.26,5.48,5.72,6.01,6.24,6.58,6.93,7.31,7.63,8.09,8.55,9.03,9.59,10,10.6,11.2,11.8,12.5,13.2,13.7,14.3,15.1,15.8,16.5,17.1,17.8,18.5,19.2,19.8,20.3,20.9,21.5,22,22.6,23.1,23.6,24.1,24.5,24.9,25.3,25.7,26.1,26.4,26.7,27,27.3,27.6,27.8,28.1,28.4,28.6,28.8,28.9,29.1,29.3,29.4,29.6,29.7,29.8,29.9,30,30.1,30.2,30.3,30.4,30.4,30.5,30.5,30.5,30.5,30.6,30.6,30.6,30.6,30.5,30.5,30.5,30.5,30.4,30.4,30.3,30.2,30.1,30.1,30,29.8,29.7,29.6,29.4,29.2,29,28.7,28.5,28.3,28,27.8,27.5,27.2,27,26.6,26.4,26.1,25.8,25.6,25.2,25,24.7,24.4,24.1,23.9,23.6,23.3,23.1,22.7,22.5,22.2,21.9,21.6,21.4,21.1,20.8,20.5,20.3,20,19.7,19.5,19.2,19,18.7,18.5,18.3,18,17.8,17.6,17.3,17.1,16.9,16.7,16.5,16.2,16.1,15.8,15.6,15.5,15.3,15,14.9,14.7,14.5,14.3,14.1,14,13.8,13.6,13.5,13.3,13.2,13,12.8,12.7,12.5,12.4,12.2,12.1,11.9,11.8,11.7,11.5,11.4,11.3,11.1,11,10.9,10.8,10.6,10.5,10.4,10.3,10.2,10.1,10,9.91,9.84,9.75,9.66,9.56,9.48,9.38,9.31,9.2,9.13,9.05,8.98,8.9,8.82,8.74,8.67,8.59,8.51,8.45,8.36,8.3,8.23,8.16,8.1,8.04,7.96,7.89,7.83,7.77,7.71,7.65,7.61,7.55,7.5,7.43,7.37,7.32,7.25,7.2,7.16,7.12,7.08,7.04,6.99,6.94,6.91,6.87,6.83,6.78,6.74,6.71,6.7,6.65,6.63,6.6,6.57,6.53,6.5,6.47,6.45,6.42,6.4,6.36,6.35,6.31,6.28,6.25,6.21,6.19,6.16,6.13,6.12,6.09,6.08,6.05,6.05,6.02,6.01,5.98,5.97,5.95,5.94,5.92,5.91,5.89,5.88,5.85,5.83,5.8,5.79,5.75,5.75,5.72,5.71,5.69,5.68,5.66,5.66,5.64,5.65,5.63,5.63,5.62,5.62,5.6,5.61,5.6,5.6,5.58,5.58,5.56,5.56,5.55,5.55,5.54,5.54,5.53,5.53,5.53,5.53,5.53,5.53,5.52,5.52,5.52,5.53,5.52,5.52,5.52,5.52,5.51,5.53,5.51,5.52,5.52,5.52,5.51,5.52,5.52,5.54,5.54,5.54,5.56,5.57,5.58,5.61,5.61,5.63,5.64,5.66,5.67,5.69,5.7,5.73,5.75,5.77,5.78,5.8,5.81,5.83,5.84,5.88,5.89,5.93,5.95,5.97,6,6.03,6.05,6.09,6.1,6.14,6.17,6.2,6.22,6.26,6.28,6.34,6.37,6.39,6.45,6.49,6.52,6.57,6.62,6.66,6.69,6.75,6.8,6.84,6.9,6.96,7,7.05,7.11,7.18,7.24,7.27,7.34,7.41,7.48,7.54,7.59,7.67,7.73,7.78,7.83,7.89,7.95,8,8.05,8.1,8.16,8.21,8.24,8.26,8.32,8.35,8.39,8.43,8.45,8.48,8.51,8.54,8.56,8.59,8.62,8.64,8.67,8.69,8.72,8.74,8.76,8.78,8.78,8.78,8.79,8.81,8.81,8.81,8.81,8.8,8.8,8.79,8.78,8.77,8.75,8.75,8.74,8.74,8.74,8.74,8.75,8.76,8.78,8.79,8.79,8.8,8.79,8.81,8.82,8.84,8.85,8.85,8.86,8.87,8.87,8.88,8.89,8.9,8.92,8.95,8.97,9.01,9.03,9.11,9.15,9.2,9.26,9.32,9.38,9.46,9.54,9.63,9.72,9.82,9.94,10.1,10.2,10.3,10.4,10.6,10.8,10.9,11.1,11.4,11.6,11.8,12.1,12.4,12.7,13,13.3,13.8,14.1,14.8,15.3,15.9,16.4,17.1,17.7,18.5,19.3,20.5,21.5,22.5,23.7,24.8,26.2,27.5,29.7,31.4,33.2,35,37.3,39.3,42.7,45.3,47.9,50.6,53.6,57.6,60.9,64,67.2,70.6,75,78.4,81.6,84.7,87.5,91.9,94.6,97.2,100,103,106,108,110,112,114,116,117,119,120,122,123,124,125,126,127,128,128,129,129,130,130,130,130,131,131,131,131,130,130,130,130,129,129,128,128,127,126,126,125,124,123,122,122,121,120,119,118,117,116,115,114,113,112,111,110,109,108,107,106,104,104,102,101,101,99.3,98.3,97.1,96.3,94.9,94.1,93.4,92.1,91.2,90.1,89.3,88,87.3,86.1,85.3,84.6,83.4,82.6,81.5,80.8,79.7,79,78,77.2,76.3,75.6,74.6,73.9,73,72.3,71.4,70.8,69.9,69.2,68.7,67.8,66.9,66.3,65.5,64.9,64.1,63.6,62.8,62.3,61.6,61.1,60.3,59.8,59.1,58.6,57.9,57.5,56.8,56.3,55.7,55,54.6,54,53.6,52.9,52.6,52,51.4,51,50.5,50.1,49.5,49.2,48.6,48.1,47.7,47.2,46.9,46.4,45.8,45.5,45,44.7,44.3,43.8,43.5,43,42.7,42.3,41.9,41.6,41.2,40.7,40.5,40,39.8,39.3,38.9,38.7,38.3,37.9,37.6,37.3,36.9,36.6,36.3,35.9,35.7,35.4,35,34.8,34.5,34.1,33.9,33.6,33.3,33.1,32.8,32.5,32.3,32,31.7,31.5,31.3,31,30.7,30.5,30.3,30,29.8,29.6,29.3,29.1,28.9,28.7,28.4,28.2,28,27.8,27.5,27.4,27.1,26.9,26.7,26.6,26.4,26.2,26,25.8,25.7,25.5,25.3,25.2,25,24.9,24.7,24.6,24.4,24.2,24,23.9,23.7,23.6,23.4,23.3,23.2,23,22.9,22.8,22.6,22.5,22.4,22.3,22.1,22,21.9,21.8,21.7,21.6,21.5,21.4,21.3,21.2,21.1,21,20.9,20.9,20.8,20.7,20.6,20.5,20.4,20.3,20.3,20.2,20.1,20,20,19.9,19.8,19.8,19.7,19.6,19.6,19.5,19.5,19.4,19.4,19.3,19.3,19.2,19.2,19.1,19.1,19,19,19,18.9,18.8,18.8,18.7,18.7,18.7,18.6,18.6,18.5,18.5,18.5,18.4,18.4,18.4,18.4,18.4,18.4,18.4,18.4,18.4,18.4,18.3,18.3,18.3,18.3,18.3,18.3,18.3,18.3,18.3,18.3,18.3,18.3,18.3,18.3,18.3,18.3,18.3,18.4,18.4,18.4,18.4,18.4,18.4,18.4,18.4,18.4,18.5,18.5,18.5,18.5,18.6,18.6,18.6,18.6,18.7,18.7,18.7,18.8,18.8,18.8,18.9,18.9,19,19,19.1,19.1,19.2,19.2,19.3,19.3,19.4,19.5,19.5,19.6,19.7,19.7,19.8,19.9,19.9,20,20,20.1,20.2,20.3,20.4,20.5,20.5,20.6,20.7,20.8,20.9,20.9,21,21.1,21.3,21.4,21.5,21.5,21.6,21.7,21.8,21.9,22,22.1,22.2,22.3,22.5,22.6,22.8,22.9,23,23.1,23.3,23.4,23.5,23.6,23.8,23.9,24.1,24.2,24.3,24.4,24.6,24.7,24.9,25,25.2,25.3,25.5,25.6,25.8,25.9,26.1,26.2,26.5,26.6,26.8,27,27.1,27.3,27.4,27.6,27.9,28,28.2,28.4,28.6,28.7,29,29.2,29.3,29.5,29.7,29.9,30,30.4,30.5,30.7,30.9,31.1,31.5,31.6,31.8,32,32.2,32.4,32.7,32.9,33.1,33.3,33.5,33.9,34,34.3,34.5,34.7,34.9,35.3,35.5,35.7,35.9,36.1,36.6,36.8,37,37.2,37.6,37.8,38,38.3,38.5,38.9,39.1,39.4,39.6,40.1,40.2,40.5,40.8,41,41.5,41.7,42,42.2,42.7,42.9,43.2,43.4,43.9,44.1,44.4,44.6,45.1,45.4,45.7,45.9,46.4,46.6,46.9,47.1,47.6 };
         double[] Ks = new double[2001] { 0.527,0.526,0.525,0.524,0.523,0.522,0.521,0.52,0.519,0.518,0.517,0.516,0.515,0.514,0.513,0.512,0.511,0.51,0.509,0.508,0.507,0.506,0.505,0.504,0.503,0.502,0.501,0.5,0.499,0.498,0.497,0.496,0.495,0.494,0.492,0.491,0.49,0.489,0.488,0.486,0.485,0.484,0.483,0.482,0.481,0.479,0.478,0.477,0.476,0.475,0.473,0.472,0.471,0.47,0.468,0.467,0.466,0.465,0.463,0.462,0.461,0.46,0.459,0.458,0.457,0.456,0.455,0.454,0.453,0.452,0.45,0.449,0.448,0.447,0.446,0.445,0.444,0.443,0.442,0.441,0.44,0.439,0.438,0.436,0.435,0.434,0.432,0.431,0.43,0.429,0.427,0.426,0.425,0.423,0.422,0.421,0.42,0.418,0.417,0.416,0.414,0.414,0.413,0.412,0.411,0.41,0.409,0.408,0.407,0.407,0.406,0.405,0.404,0.403,0.402,0.401,0.4,0.399,0.398,0.397,0.396,0.395,0.394,0.393,0.392,0.391,0.391,0.39,0.389,0.388,0.387,0.385,0.382,0.38,0.378,0.376,0.374,0.372,0.37,0.368,0.365,0.364,0.363,0.361,0.36,0.358,0.357,0.355,0.354,0.353,0.351,0.35,0.349,0.348,0.347,0.346,0.345,0.343,0.342,0.341,0.34,0.338,0.337,0.335,0.333,0.331,0.329,0.328,0.326,0.324,0.322,0.32,0.318,0.316,0.314,0.312,0.31,0.308,0.306,0.304,0.302,0.3,0.298,0.296,0.294,0.292,0.29,0.288,0.286,0.284,0.282,0.28,0.278,0.277,0.275,0.273,0.271,0.269,0.267,0.265,0.264,0.262,0.26,0.258,0.257,0.255,0.253,0.252,0.25,0.248,0.246,0.245,0.243,0.241,0.24,0.238,0.237,0.235,0.233,0.232,0.23,0.229,0.227,0.226,0.224,0.223,0.222,0.22,0.219,0.217,0.216,0.214,0.213,0.212,0.21,0.209,0.207,0.206,0.205,0.203,0.202,0.201,0.199,0.198,0.197,0.196,0.194,0.193,0.192,0.19,0.189,0.188,0.187,0.185,0.184,0.183,0.182,0.18,0.179,0.178,0.177,0.176,0.174,0.173,0.172,0.17,0.169,0.168,0.167,0.165,0.164,0.163,0.161,0.16,0.159,0.157,0.156,0.155,0.153,0.152,0.15,0.149,0.148,0.146,0.145,0.144,0.142,0.141,0.14,0.138,0.137,0.136,0.135,0.133,0.132,0.131,0.13,0.128,0.127,0.126,0.125,0.123,0.122,0.121,0.12,0.119,0.118,0.117,0.116,0.114,0.113,0.112,0.111,0.11,0.109,0.108,0.107,0.106,0.105,0.104,0.102,0.101,0.1,0.0993,0.0983,0.0973,0.0963,0.0952,0.0942,0.0932,0.0922,0.0912,0.0902,0.0892,0.0883,0.0873,0.0863,0.0853,0.0844,0.0834,0.0824,0.0816,0.0807,0.0799,0.079,0.0782,0.0773,0.0765,0.0756,0.0748,0.0739,0.0732,0.0725,0.0717,0.071,0.0702,0.0695,0.0688,0.068,0.0673,0.0665,0.0659,0.0652,0.0645,0.0639,0.0632,0.0625,0.0618,0.0612,0.0605,0.0598,0.0591,0.0584,0.0577,0.057,0.0563,0.0556,0.0549,0.0542,0.0535,0.0528,0.0523,0.0517,0.0511,0.0505,0.0499,0.0493,0.0487,0.0482,0.0476,0.047,0.0465,0.0459,0.0454,0.0449,0.0444,0.0439,0.0433,0.0428,0.0423,0.0418,0.0413,0.0408,0.0403,0.0399,0.0394,0.0389,0.0384,0.0379,0.0375,0.037,0.0366,0.0362,0.0357,0.0353,0.0349,0.0345,0.0341,0.0337,0.0333,0.0329,0.0325,0.0321,0.0318,0.0314,0.031,0.0307,0.0303,0.0299,0.0295,0.0292,0.0289,0.0285,0.0282,0.0279,0.0275,0.0272,0.0269,0.0266,0.0262,0.0259,0.0256,0.0253,0.025,0.0247,0.0244,0.0241,0.0238,0.0235,0.0232,0.0229,0.0226,0.0224,0.0221,0.0219,0.0216,0.0213,0.0211,0.0208,0.0206,0.0203,0.0201,0.0198,0.0196,0.0194,0.0192,0.0189,0.0187,0.0185,0.0183,0.018,0.0178,0.0176,0.0174,0.0172,0.017,0.0168,0.0166,0.0164,0.0162,0.016,0.0159,0.0157,0.0155,0.0153,0.0152,0.015,0.0148,0.0146,0.0145,0.0143,0.0141,0.014,0.0139,0.0137,0.0136,0.0134,0.0133,0.0131,0.013,0.0129,0.0128,0.0127,0.0126,0.0125,0.0124,0.0123,0.0122,0.0121,0.012,0.0119,0.0118,0.0117,0.0116,0.0115,0.0114,0.0113,0.0112,0.0111,0.011,0.0109,0.0108,0.0107,0.0106,0.0105,0.0104,0.0103,0.0102,0.0101,0.00998,0.00988,0.00979,0.00969,0.0096,0.0095,0.0094,0.00931,0.00921,0.00912,0.00903,0.00893,0.00884,0.00874,0.00865,0.00856,0.00846,0.00837,0.00828,0.00819,0.0081,0.008,0.00791,0.00782,0.00773,0.00764,0.00755,0.00746,0.00737,0.00728,0.0072,0.00711,0.00702,0.00693,0.00684,0.00676,0.00667,0.00659,0.0065,0.00641,0.00633,0.00624,0.00616,0.00608,0.00599,0.00591,0.00583,0.00575,0.00566,0.00558,0.0055,0.00542,0.00534,0.00526,0.00518,0.0051,0.00502,0.00495,0.00487,0.00479,0.00471,0.00464,0.00456,0.00449,0.00441,0.00434,0.00426,0.00419,0.00412,0.00404,0.00397,0.0039,0.00383,0.00376,0.00369,0.00362,0.00355,0.00348,0.00342,0.00335,0.00328,0.00322,0.00315,0.00309,0.00302,0.00296,0.00289,0.00283,0.00277,0.00271,0.00265,0.00259,0.00253,0.00247,0.00241,0.00235,0.00229,0.00223,0.00218,0.00212,0.00207,0.00201,0.00196,0.00191,0.00185,0.0018,0.00175,0.0017,0.00165,0.0016,0.00155,0.0015,0.00146,0.00141,0.00136,0.00132,0.00127,0.00123,0.00119,0.00114,0.0011,0.00106,0.00102,0.000981,0.000942,0.000904,0.000867,0.00083,0.000794,0.000758,0.000724,0.00069,0.000657,0.000625,0.000593,0.000563,0.000533,0.000503,0.000475,0.000447,0.000421,0.000394,0.000369,0.000345,0.000321,0.000298,0.000276,0.000255,0.000234,0.000215,0.000196,0.000178,0.000161,0.000145,0.000129,0.000115,0.000101,8.8e-05,7.6e-05,6.49e-05,5.46e-05,4.52e-05,3.67e-05,2.9e-05,2.23e-05,1.64e-05,1.14e-05,7.3e-06,4.11e-06,1.83e-06,4.58e-07,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
         double[] Kant = new double[2001] {0.066675,0.064056,0.061933,0.059922,0.058277,0.056699,0.055366,0.054163,0.053116,0.05198,0.050951,0.050117,0.049387,0.048604,0.047876,0.047379,0.046899,0.046532,0.046157,0.045792,0.045429,0.045144,0.044845,0.044536,0.044249,0.044116,0.043958,0.043874,0.043805,0.043858,0.043861,0.043912,0.043959,0.044037,0.04411,0.044203,0.044277,0.044399,0.04451,0.044647,0.044787,0.044919,0.045061,0.045227,0.045415,0.045589,0.045753,0.045857,0.045994,0.046195,0.046414,0.04668,0.046953,0.047162,0.04736,0.047593,0.047814,0.048082,0.048335,0.048595,0.048839,0.049123,0.04937,0.049608,0.049841,0.050136,0.05042,0.050784,0.05115,0.051557,0.051941,0.052387,0.05282,0.053409,0.05399,0.054462,0.05494,0.055543,0.056155,0.056638,0.057152,0.057689,0.058265,0.058847,0.059478,0.060054,0.06067,0.061221,0.061809,0.062358,0.062922,0.063434,0.06397,0.064462,0.064964,0.065431,0.06591,0.066378,0.066852,0.067309,0.067771,0.068133,0.068479,0.068815,0.06914,0.069362,0.069563,0.069828,0.070073,0.070279,0.070472,0.070679,0.070872,0.071025,0.071165,0.071285,0.07139,0.071486,0.071573,0.07163,0.071682,0.071739,0.071775,0.071815,0.071864,0.071959,0.07206,0.072153,0.07224,0.072295,0.072349,0.072414,0.072476,0.07251,0.072528,0.072529,0.072506,0.072433,0.07234,0.07221,0.072063,0.071837,0.071602,0.071343,0.071067,0.070707,0.070307,0.06984,0.069355,0.068756,0.06814,0.06744,0.066733,0.065904,0.065061,0.06421,0.063357,0.062437,0.061518,0.060579,0.059652,0.058611,0.057591,0.056554,0.055543,0.054379,0.053243,0.052056,0.0509,0.049671,0.048481,0.047309,0.046174,0.045,0.043871,0.042781,0.041734,0.040618,0.039543,0.038457,0.037412,0.0362,0.035043,0.033919,0.032846,0.031701,0.030606,0.029616,0.028665,0.027715,0.026803,0.025951,0.025134,0.024293,0.023487,0.022687,0.021918,0.021085,0.020284,0.019497,0.01874,0.017977,0.017242,0.016604,0.015987,0.01541,0.014845,0.014317,0.0138,0.013295,0.012801,0.012336,0.011884,0.011394,0.010918,0.010464,0.010022,0.0095808,0.0091553,0.0087766,0.008411,0.0080523,0.0077073,0.0073755,0.0070567,0.0067504,0.0064566,0.0061747,0.0059044,0.0056455,0.0053977,0.0051604,0.0049336,0.0047168,0.0045097,0.004312,0.0041234,0.0039435,0.003772,0.0036087,0.003453,0.0033048,0.0031638,0.0030295,0.0029017,0.00278,0.0026642,0.0025538,0.0024487,0.0023483,0.0022525,0.0021608,0.0020731,0.0019889,0.0019079,0.0018298,0.0017542,0.0016809,0.0016096,0.0015398,0.0014713,0.0014037,0.0013368,0.0012702,0.0012035,0.0011365,0.0010688,0.0010001,0.00093008,0.00085841,0.00078476,0.00071002,0.00063884,0.00057124,0.00050727,0.00044695,0.0003903,0.00033737,0.00028817,0.00024273,0.0002011,0.00016329,0.00012933,9.9259e-05,7.3102e-05,5.0888e-05,3.2647e-05,1.8408e-05,8.2009e-06,2.0551e-06,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
         double[] phiI = new double[2001] {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4.2e-05,8.5e-05,8.9e-05,8.2e-05,8e-05,8.1e-05,9.9e-05,0.000124,0.000153,0.00018,0.000214,0.00026,0.000322,0.000409,0.000508,0.000615,0.000727,0.000847,0.000975,0.001105,0.00122,0.001348,0.001526,0.001749,0.001988,0.002193,0.00246,0.002822,0.00318,0.003537,0.003868,0.004211,0.004568,0.004923,0.005278,0.005602,0.005846,0.00606,0.006282,0.006521,0.006683,0.006811,0.006922,0.006986,0.007037,0.007116,0.007243,0.007379,0.007491,0.007628,0.007825,0.008045,0.008258,0.008437,0.008618,0.008832,0.009051,0.009341,0.009691,0.009965,0.010214,0.010574,0.010904,0.011111,0.011327,0.011637,0.01192,0.012062,0.012183,0.012359,0.012607,0.012737,0.012797,0.012874,0.01294,0.013023,0.013095,0.013117,0.01308,0.013,0.012879,0.012735,0.01257,0.012412,0.012302,0.012212,0.012129,0.012042,0.01194,0.01181,0.011639,0.01143,0.011196,0.010955,0.010736,0.010504,0.010258,0.010015,0.009813,0.009491,0.009211,0.009011,0.00876,0.008403,0.00818,0.007955,0.007709,0.007468,0.007246,0.007028,0.006819,0.006639,0.006446,0.006224,0.005977,0.005785,0.005628,0.005418,0.00521,0.005029,0.004859,0.004699,0.004557,0.004429,0.004308,0.004192,0.004081,0.003972,0.003863,0.00375,0.003632,0.00352,0.00342,0.003325,0.003237,0.003153,0.003072,0.002992,0.002911,0.002823,0.002732,0.002643,0.002563,0.002489,0.002411,0.002337,0.002276,0.002233,0.002171,0.00211,0.00205,0.00199,0.001932,0.001874,0.001818,0.001762,0.001707,0.001653,0.0016,0.001548,0.001496,0.001446,0.001396,0.001347,0.001299,0.001252,0.001206,0.00116,0.001116,0.001072,0.00103,0.000988,0.000947,0.000907,0.000867,0.000829,0.000791,0.000755,0.000719,0.000684,0.00065,0.000617,0.000585,0.000553,0.000523,0.000493,0.000464,0.000436,0.000409,0.000383,0.000357,0.000333,0.000309,0.000286,0.000265,0.000244,0.000223,0.000204,0.000186,0.000168,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
         double[] phiII = new double[2001] { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1e-06,6e-06,1.8e-05,5.9e-05,0.000122,0.000209,0.000318,0.000451,0.000607,0.000785,0.000986,0.001211,0.001458,0.001729,0.002022,0.002339,0.002652,0.002963,0.003307,0.003762,0.004252,0.004654,0.005237,0.005953,0.006644,0.007548,0.008352,0.009271,0.010381,0.011662,0.012885,0.014275,0.016192,0.017591,0.019361,0.021075,0.022523,0.025446,0.026517,0.028035,0.028705,0.029088,0.029036,0.028632,0.027784,0.026463,0.024735,0.022467,0.020802,0.019141,0.0175,0.015861,0.014488,0.013264,0.012099,0.011258,0.010642,0.009969,0.009408,0.008961,0.008418,0.007913,0.007522,0.00729,0.007062,0.006717,0.006451,0.006239,0.006056,0.005921,0.005815,0.005699,0.005584,0.005487,0.005419,0.00536,0.0053,0.005238,0.005173,0.005098,0.005028,0.004973,0.00494,0.004915,0.004882,0.00484,0.004797,0.004756,0.00472,0.00469,0.004667,0.004658,0.004659,0.004661,0.004658,0.004649,0.004631,0.004597,0.00455,0.004495,0.004454,0.004384,0.004263,0.004132,0.004046,0.003976,0.00386,0.003731,0.003595,0.00346,0.003324,0.003187,0.003044,0.002903,0.002781,0.002695,0.002619,0.002523,0.002412,0.002298,0.00219,0.002094,0.002004,0.001917,0.001835,0.001756,0.001676,0.001592,0.0015,0.001413,0.001341,0.001275,0.001202,0.001113,0.001015,0.000922,0.000833,0.000749,0.000669,0.000594,0.000523,0.000457,0.000395,0.000338,0.000285,0.000236,0.000193,0.000153,0.000118,8.8e-05,6.2e-05,4.1e-05,2.4e-05,1.1e-05,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
         double[] Kall = new double[2001];
         int[] j = new int[2001];
         double[] t1 = new double[2001];
         double[] t2 = new double[2001];
         double[] tau = new double[2001];
         double[] kChlrel = new double[2001];
         double[] talf = new double[2001];
         double[] ralf = new double[2001];
         double[] t12 = new double[2001];
         double[] r12 = new double[2001];
         double[] t21 = new double[2001];
         double[] r21 = new double[2001];
         double[] denom = new double[2001];
         double[] Ta = new double[2001];
         double[] Ra = new double[2001];
         double[] t = new double[2001];
         double[] r = new double[2001];
         double[] D = new double[2001];
         double[] rq = new double[2001];
         double[] tq = new double[2001];
         double[] a = new double[2001];
         double[] b = new double[2001];
         double[] bNm1 = new double[2001];
         double[] bN2 = new double[2001];
         double[] a2 = new double[2001];            
         double[] Rsub = new double[2001];
         double[] Tsub = new double[2001];
         double[] tran = new double[2001];
         double[] refl = new double[2001];
         double[] Rb = new double[2001];
         double[] Z = new double[2001];
         double[] rho = new double[2001];
         bool[] I_rt = new bool[2001];
         double[] s = new double[2001];
         bool[] I_a = new bool[2001];
         double[] kk = new double[2001];
         double[] kChl = new double[2001];

         double ndub = 15;
         Script  myfun = new Script ();

         int i = 0;
         int jLength = 0;
        
         for(int k = 0;k &lt; 2001;k++)
         {
            Kall[k] = (Cab * Kab[k] + Cca * Kca[k] + Cdm * Kdm[k] + Cw * Kw[k] + Cs * Ks[k] + Cant * Kant[k]) / N;
         }
         for(int k = 0;k &lt; Kall.Length;k++)
         {
            if(Kall[k] &gt; 0)
            {
               j[i++] = k;
                                    
            }
         }
         jLength = i;
         // Console.WriteLine(jLength);
         for (int k = 0; k &lt; 2001; k++)
         {
            t1[k] = (1 - Kall[k]) * Math.Exp(-Kall[k]);
            t2[k] = Kall[k] * Kall[k] * myfun.exponentialintegralen(Kall[k], 1);
            // Console.WriteLine(t2[k]);
         }
         for (int k = 0; k &lt; jLength; k++)
         {
            tau[k] = t1[j[k]] + t2[j[k]];
         }
         for (int k = 0; k &lt; jLength; k++)
         {
            kChlrel[k] = Cab * Kab[j[k]] / (Kall[j[k]] * N);
         }
            
         talf = myfun.calctav(59, nr);            
         for (int k = 0; k &lt; 2001; k++)
         {
            ralf[k] = 1 - talf[k];
         }
         t12 = myfun.calctav(90, nr);
         for (int k = 0; k &lt; 2001; k++)
         {
            r12[k] = 1 - t12[k];
         }
         for (int k = 0; k &lt; 2001; k++)
         {
            t21[k] = t12[k] / Math.Pow(nr[k], 2);
         }
         for (int k = 0; k &lt; 2001; k++)
         {
            r21[k] = 1 - t21[k];
         }
         //top surface side
         for (int k = 0; k &lt; 2001; k++)
         {
            denom[k] = 1 - r21[k] * r21[k] * tau[k] * tau[k];
         }
         for (int k = 0; k &lt; 2001; k++)
         {
            Ta[k] = talf[k] * tau[k] * t21[k] / denom[k];
         }
         for (int k = 0; k &lt; 2001; k++)
         {
            Ra[k] = ralf[k] + r21[k] * tau[k] * Ta[k];
         }
         //bottom surface side
         for (int k = 0; k &lt; 2001; k++)
         {
            t[k] = t12[k] * tau[k] * t21[k] / denom[k];
         }
         for (int k = 0; k &lt; 2001; k++)
         {
            r[k] = r12[k] + r21[k] * tau[k] * t[k];
         }
         //Stokes equations to compute properties of next N-1 layers (N real)
         for (int k = 0; k &lt; 2001; k++)
         {
            D[k] = Math.Sqrt((1 + r[k] + t[k]) * (1 + r[k] - t[k]) * (1 - r[k] + t[k]) * (1 - r[k] - t[k]));
            rq[k] = r[k] * r[k];
            tq[k] = t[k] * t[k];
         }
         for (int k = 0; k &lt; 2001; k++)
         {
            a[k] = (1 + rq[k] - tq[k] + D[k]) / (2 * r[k]);
            b[k] = (1 - rq[k] + tq[k] + D[k]) / (2 * t[k]);

         }
         for (int k = 0; k &lt; 2001; k++)
         {
            bNm1[k] = Math.Pow(b[k], (N - 1));               
            bN2[k] = Math.Pow(bNm1[k], 2);
            a2[k] = Math.Pow(a[k], 2);
            denom[k] = a2[k] * bN2[k] - 1;
            Rsub[k] = a[k] * (bN2[k] - 1) / denom[k];
            Tsub[k] = bNm1[k] * (a2[k] - 1) / denom[k];
         }
         //Case of zero absorption
         i = 0;
         for (int k = 0; k &lt; r.Length; k++)
         {
            if ((r[k] + t[k]) &gt; 1)
            {
               j[i++] = k;

            }
         }
         jLength = i;
            
         // Console.WriteLine(jLength);
         for (int k = 0; k &lt; jLength; k++)
         {
            Tsub[j[k]] = t[j[k]] / (t[j[k]] + (1 - t[j[k]]) * (N - 1));
            Rsub[j[k]] = 1 - Tsub[j[k]];
         }

         //Reflectance and transmittance of the leaf: combine top layer with next N-1 layers
         for (int k = 0; k &lt; 2001; k++)
         {
            denom[k] = 1 - Rsub[k] * r[k];
            tran[k] = Ta[k] * Tsub[k] / denom[k];
            refl[k] = Ra[k] + Ta[k] * Rsub[k] * t[k] / denom[k];
            // Console.WriteLine(refl[k]);
         }
         //doubling method 
         for (int k = 0; k &lt; 2001; k++)
         {
            Rb[k] = (refl[k] - ralf[k]) / (talf[k] * t21[k] + (refl[k] - ralf[k]) * r21[k]); 
            Z[k] = tran[k] * (1 - Rb[k] * r21[k]) / (talf[k] * t21[k]);  
            rho[k] = (Rb[k] - r21[k] * Z[k] * Z[k]) / (1 - Math.Pow((r21[k] * Z[k]), 2));
            tau[k] = (1 - Rb[k] * r21[k]) / (1 - Math.Pow((r21[k] * Z[k]), 2)) * Z[k];
            t[k] = tau[k];
            r[k] = Math.Max(rho[k], 0);
            //   Console.WriteLine(r[k]);
         }
         //Derive Kubelka-Munk s and k
         for (int k = 0; k &lt; 2001; k++)
         {
            I_rt[k] = (r[k] + t[k]) &lt; 1; 
            if(I_rt[k])
            {
               D[k] = Math.Sqrt((1 + r[k] + t[k]) * (1 + r[k] - t[k]) * (1 - r[k] + t[k]) * (1 - r[k] - t[k]));
               a[k] = (1 + r[k] * r[k] - t[k] * t[k] + D[k]) / (2 * r[k]);
               b[k] = (1 - r[k] * r[k] + t[k] * t[k] + D[k]) / (2 * t[k]);
               //Console.WriteLine(b[k]);
            }
            else
            {
               a[k] = 1;
               b[k] = 1;
            }
            // Console.WriteLine(b[k]);
         }
         for (int k = 0; k &lt; 2001; k++)
         {
            s[k] = r[k] / t[k];
            kk[k] = Math.Log(b[k]);
            I_a[k] = (a[k] &gt; 1) &amp;&amp; (a[k] != double.PositiveInfinity);
            if (I_a[k])
            {
               s[k] = 2 * a[k] / (a[k] * a[k] - 1) * Math.Log(b[k]);
                    
               kk[k] = (a[k] - 1) / (a[k] + 1) * Math.Log(b[k]); 
            }
            kChl[k] = kChlrel[k] * kk[k];
            // Console.WriteLine(kChl[k]);

         }
            

         //Fluorescence of the leaf mesophyll layer
         int[] wle = new int[] { 400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750};
         int[] wlf = new int[] {640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850 };
         int[] wlp = new int[] {400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1595,1596,1597,1598,1599,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672,1673,1674,1675,1676,1677,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1716,1717,1718,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1729,1730,1731,1732,1733,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794,1795,1796,1797,1798,1799,1800,1801,1802,1803,1804,1805,1806,1807,1808,1809,1810,1811,1812,1813,1814,1815,1816,1817,1818,1819,1820,1821,1822,1823,1824,1825,1826,1827,1828,1829,1830,1831,1832,1833,1834,1835,1836,1837,1838,1839,1840,1841,1842,1843,1844,1845,1846,1847,1848,1849,1850,1851,1852,1853,1854,1855,1856,1857,1858,1859,1860,1861,1862,1863,1864,1865,1866,1867,1868,1869,1870,1871,1872,1873,1874,1875,1876,1877,1878,1879,1880,1881,1882,1883,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1894,1895,1896,1897,1898,1899,1900,1901,1902,1903,1904,1905,1906,1907,1908,1909,1910,1911,1912,1913,1914,1915,1916,1917,1918,1919,1920,1921,1922,1923,1924,1925,1926,1927,1928,1929,1930,1931,1932,1933,1934,1935,1936,1937,1938,1939,1940,1941,1942,1943,1944,1945,1946,1947,1948,1949,1950,1951,1952,1953,1954,1955,1956,1957,1958,1959,1960,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,2190,2191,2192,2193,2194,2195,2196,2197,2198,2199,2200,2201,2202,2203,2204,2205,2206,2207,2208,2209,2210,2211,2212,2213,2214,2215,2216,2217,2218,2219,2220,2221,2222,2223,2224,2225,2226,2227,2228,2229,2230,2231,2232,2233,2234,2235,2236,2237,2238,2239,2240,2241,2242,2243,2244,2245,2246,2247,2248,2249,2250,2251,2252,2253,2254,2255,2256,2257,2258,2259,2260,2261,2262,2263,2264,2265,2266,2267,2268,2269,2270,2271,2272,2273,2274,2275,2276,2277,2278,2279,2280,2281,2282,2283,2284,2285,2286,2287,2288,2289,2290,2291,2292,2293,2294,2295,2296,2297,2298,2299,2300,2301,2302,2303,2304,2305,2306,2307,2308,2309,2310,2311,2312,2313,2314,2315,2316,2317,2318,2319,2320,2321,2322,2323,2324,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338,2339,2340,2341,2342,2343,2344,2345,2346,2347,2348,2349,2350,2351,2352,2353,2354,2355,2356,2357,2358,2359,2360,2361,2362,2363,2364,2365,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2384,2385,2386,2387,2388,2389,2390,2391,2392,2393,2394,2395,2396,2397,2398,2399,2400 };
         int minwle = myfun.Min(wle);
            
         int maxwle = myfun.Max(wle);
         int minwlf = myfun.Min(wlf);
         int maxwlf = myfun.Max(wlf);
         // Console.WriteLine(maxwle);

         int[] Iwle = new int[351];
         int[] Iwlf = new int[211];
         i = 0;
         for (int k = 0; k &lt; wlp.Length; k++)
         {
            if ((wlp[k] &gt;= minwle) &amp;&amp; (wlp[k] &lt;= maxwle))
            {
               Iwle[i++] = k;
                    
               //Console.WriteLine(k);
            }
         }
         i = 0;
         for (int k = 0; k &lt; wlp.Length; k++)
         {
            if ((wlp[k] &gt;= minwlf) &amp;&amp; (wlp[k] &lt;= maxwlf))
            {
               Iwlf[i++] = k;                                     
            }
         }
            


         double[] te = new double[Iwle.Length];
         double[] tf = new double[Iwlf.Length];
         double[] re = new double[Iwle.Length];
         double[] rf = new double[Iwlf.Length];





         double[,] sigmoid = new double[211, 351];        
         double[,] MfI = new double[211, 351];
         double[,] MbI = new double[211, 351];
         double[,] MfII = new double[211, 351];
         double[,] MbII = new double[211, 351];

         double eps = Math.Pow(2, -ndub);
           
         for (int k = 0; k &lt; Iwle.Length;k++ )
         {
            te[k] = 1 - (kk[Iwle[k]] + s[Iwle[k]]) * eps;
            // Console.WriteLine(te[k]);
         }
         


         for (int k = 0; k &lt; Iwlf.Length; k++)
         {
            tf[k] = 1 - (kk[Iwlf[k]] + s[Iwlf[k]]) * eps;
            //Console.WriteLine(tf[k]);
         }
         for (int k = 0; k &lt; Iwle.Length; k++)
         {
            re[k] = s[Iwle[k]] * eps;
            //Console.WriteLine(re[k]);
         }
         for (int k = 0; k &lt; Iwlf.Length; k++)
         {
            rf[k] = s[Iwlf[k]] * eps;
            // Console.WriteLine(rf[k]);
         }
         for (int k = 0; k &lt; 211; k++)
         {
            for (int k1 = 0; k1 &lt; 351; k1++)
            {
               sigmoid[k, k1] = 1 / (1 + Math.Exp(-Convert.ToDouble(wlf[k]) / 10) * Math.Exp(Convert.ToDouble(wle[k1]) / 10));
               // Console.Write(string.Format("{0:N6}",sigmoid[k,k1])+" "); 
            }
            // Console.Write("******************************\n");
                
         }
            


         //Other factor .5 deleted, since these are the complete efficiencies for either PSI or PSII, not a linear combination
         for (int k = 0; k &lt; Iwlf.Length; k++)
         {
            for (int k1 = 0; k1 &lt; Iwle.Length; k1++)
            {
               MfI[k, k1] = fqe[0] * ((0.5 * phiI[Iwlf[k]]) * eps) * kChl[Iwle[k1]] * sigmoid[k, k1];
               // Console.Write(MfI[k, k1]+" ");                   
               
            }
            //Console.Write("*****************"+k+"*************\n");
            for (int k1 = 0; k1 &lt; Iwle.Length; k1++)
            {
               MbI[k, k1] = fqe[0] * ((0.5 * phiI[Iwlf[k]]) * eps) * kChl[Iwle[k1]] * sigmoid[k, k1];
                   
            }
                
         }

            

         for (int k = 0; k &lt; Iwlf.Length; k++)
         {
            for (int k1 = 0; k1 &lt; Iwle.Length; k1++)
            {
               MfII[k, k1] = fqe[1] * ((0.5 * phiII[Iwlf[k]]) * eps) * kChl[Iwle[k1]] * sigmoid[k, k1];
               //     Console.Write(MfII[k, k1] + " ");
            }
            //  Console.Write("*****************" + k + "*************\n");
            for (int k1 = 0; k1 &lt; Iwle.Length; k1++)
            {
               MbII[k, k1] = fqe[1] * ((0.5 * phiII[Iwlf[k]]) * eps) * kChl[Iwle[k1]] * sigmoid[k, k1];
            }

         }

         double[] Ih = new double[]{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
         double[] Iv = new double[]{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
            
         //Doubling routine
         for (int k2 = 0; k2 &lt; ndub; k2++)
         {
            double[] xe = new double[te.Length];
            double[] ten = new double[te.Length];
            double[] ren = new double[te.Length];
            double[] xf = new double[tf.Length];
            double[] tfn = new double[tf.Length];
            double[] rfn = new double[tf.Length];

            for (int k = 0; k &lt; te.Length; k++)
            {
               xe[k] = te[k] / (1 - re[k] * re[k]);
               ten[k] = te[k] * xe[k];
               ren[k] = re[k] * (1 + ten[k]);
               //Console.WriteLine(ren[k]);

            }


            for (int k = 0; k &lt; tf.Length; k++)
            {
               xf[k] = tf[k] / (1 - rf[k] * rf[k]);
               tfn[k] = tf[k] * xf[k];
               rfn[k] = rf[k] * (1 + tfn[k]);
               // Console.WriteLine(rfn[k]);
            }
            double[,] A11 = new double[211, 351];
            double[,] A12 = new double[211, 351];
            double[,] A21 = new double[211, 351];
            double[,] A22 = new double[211, 351];
            for (int k = 0; k &lt; 211; k++)
            {
               for (int k1 = 0; k1 &lt; 351; k1++)
               {
                  A11[k, k1] = xf[k] * Ih[k1] + Iv[k] * xe[k1];
                  A12[k, k1] = (xf[k] * xe[k1]) * (rf[k] * Ih[k1] + Iv[k] * re[k1]);
                  A21[k, k1] = 1 + (xf[k] * xe[k1]) * (1 + rf[k] * re[k1]);
                  A22[k, k1] = (xf[k] * rf[k]) * Ih[k1] + Iv[k] * (xe[k1] * re[k1]);
                  // Console.WriteLine(A11[k,k1]);

               }
            }

               


            double[,] MfnI = new double[211, 351];
            double[,] MbnI = new double[211, 351];
            double[,] MfnII = new double[211, 351];
            double[,] MbnII = new double[211, 351];
                
            for (int k = 0; k &lt; 211; k++)
            {
               for (int k1 = 0; k1 &lt; 351; k1++)
               {
                  MfnI[k, k1] = MfI[k, k1] * A11[k, k1] + MbI[k, k1] * A12[k, k1];
                  MbnI[k, k1] = MbI[k, k1] * A21[k, k1] + MfI[k, k1] * A22[k, k1];
                  MfnII[k, k1] = MfII[k, k1] * A11[k, k1] + MbII[k, k1] * A12[k, k1];
                  MbnII[k, k1] = MbII[k, k1] * A21[k, k1] + MfII[k, k1] * A22[k, k1];
                  //Console.WriteLine(MfnI[k, k1]);
               }
            }
            te = ten; re = ren; tf = tfn; rf = rfn;
            MfI = MfnI; MbI = MbnI; MfII = MfnII; MbII = MbnII;
         }

            

            
         double[,] g1 = new double[211, 351];
         double[,] g2 = new double[211, 351];
         double[,] f1 = new double[211, 351];
         double[,] f2 = new double[211, 351];
         g1 = MbI; g2 = MbII; f1 = MfI; f2 = MfII;
         for (int k = 0; k &lt; Rb.Length; k++)
         {
            Rb[k] = rho[k] + Math.Pow(tau[k], 2) * r21[k] / (1 - rho[k] * r21[k]);
            //Console.WriteLine(Rb[k]);
         }
         double[,] Xe = new double[211, 351];
         double[,] Xf = new double[211, 351];
         double[,] Ye = new double[211, 351];
         double[,] Yf = new double[211, 351];

         double[,] A = new double[211, 351];
         double[,] B = new double[211, 351];

         double[,] g1n = new double[211, 351];
         double[,] f1n = new double[211, 351];
         double[,] g2n = new double[211, 351];
         double[,] f2n = new double[211, 351];   


         for (int k = 0; k &lt; 211;k++ )
         {
            for (int k1 = 0; k1 &lt; 351;k1++ )
            {
               Xe[k, k1] = Iv[k] * (talf[Iwle[k1]] / (1 - r21[Iwle[k1]] * Rb[Iwle[k1]]));
               Xf[k, k1] = t21[Iwlf[k]] / (1 - r21[Iwlf[k]] * Rb[Iwlf[k]]) * Ih[k1];
               Ye[k, k1] = Iv[k] * (tau[Iwle[k1]] * r21[Iwle[k1]] / (1 - rho[Iwle[k1]] * r21[Iwle[k1]]));
               Yf[k, k1] = tau[Iwlf[k]] * r21[Iwlf[k]] / (1 - rho[Iwlf[k]] * r21[Iwlf[k]]) * Ih[k1];
               // Console.WriteLine(Yf[k, k1]);

            }              
         }
           
         for (int k = 0; k &lt; 211; k++)
         {
            for (int k1 = 0; k1 &lt; 351; k1++)
            {
               A[k, k1] = Xe[k, k1] * (1 + Ye[k, k1] * Yf[k, k1]) * Xf[k, k1];
               B[k, k1] = Xe[k, k1] * (Ye[k, k1] + Yf[k, k1]) * Xf[k, k1];
               // Console.WriteLine(A[k, k1]);
            }
         }
          

         for (int k = 0; k &lt; 211; k++)
         {
            for (int k1 = 0; k1 &lt; 351; k1++)
            {
               g1n[k, k1] = A[k, k1] * g1[k, k1] + B[k, k1] * f1[k, k1];
               f1n[k, k1] = A[k, k1] * f1[k, k1] + B[k, k1] * g1[k, k1];
               g2n[k, k1] = A[k, k1] * g2[k, k1] + B[k, k1] * f2[k, k1];
               f2n[k, k1] = A[k, k1] * f2[k, k1] + B[k, k1] * g2[k, k1];
               // Console.WriteLine(g1n[k, k1]);
            }
         }

           

            
         MbI = g1n;
         MbII = g2n;
         MfI = f1n;
         MfII = f2n;

         //my add
         double[] sum_MbI = new double[211];
         double[] sum_MbII = new double[211];
         double[] sum_MfI = new double[211];
         double[] sum_MfII = new double[211];
         double[] MM = new double[351];
         double[] sum_Mb = new double[211];
         double[] sum_Mf = new double[211];
         double[] sum_F = new double[211];


         double value1;
         double value2;
         
        


         for (int k = 0; k &lt; 211; k++)
         {
            for (int k1 = 0; k1 &lt; 351; k1++)
            {
               MM[k1] = MbI[k, k1];
            }
            sum_MbI[k] = myfun.Sum(MM);
            //Console.WriteLine(sum_MbI[k]);
         }
         for (int k = 0; k &lt; 211; k++)
         {
            for (int k1 = 0; k1 &lt; 351; k1++)
            {
               MM[k1] = MbII[k, k1];
            }
            sum_MbII[k] = myfun.Sum(MM);
            // Console.WriteLine(sum_MbII[k]);
         }
         for (int k = 0; k &lt; 211; k++)
         {
            for (int k1 = 0; k1 &lt; 351; k1++)
            {
               MM[k1] = MfI[k, k1];
            }
            sum_MfI[k] = myfun.Sum(MM);
            // Console.WriteLine(sum_MfI[k]);
         }
         for (int k = 0; k &lt; 211; k++)
         {
            for (int k1 = 0; k1 &lt; 351; k1++)
            {
               MM[k1] = MfII[k, k1];
            }
            sum_MfII[k] = myfun.Sum(MM);
            //  Console.WriteLine(sum_MfII[k]);
         }
         for (int k = 0; k &lt; 211; k++)
         {
            sum_Mb[k] = sum_MbI[k] + sum_MbII[k];
            sum_Mf[k] = sum_MfI[k] + sum_MfII[k];
            sum_F[k] = sum_Mb[k] + sum_Mf[k];
            //   Console.WriteLine(sum_F[k]);
         }

         value1 = myfun.Sum(sum_F);
         //Console.WriteLine(value1);
         //Console.WriteLine(value1);
         value2 = sum_F[single_spectral - 640];
         ratio = value2 / value1;
         //Console.WriteLine(ratio);          
      for (int k = 0; k &lt; 211; k++)
      {
         ratioall[k] = sum_F[k] / value1;
      
      }
            
           
            

         /* 输出每个数组元素的值 */

            

         
           
            
      }
        
      public double Sum(double[] Data)
      {
         double DataSum = 0;
         for (int i = 0; i &lt; Data.Length; i++)
         {
            DataSum += Data[i];
         }
         return DataSum;
      }
      public int Max(int[] data)
      {
         int max = data[0];
         for(int i = 0;i &lt; data.Length;i++)
         {
            if(data[i] &gt; max)
            {
               max = data[i];
                   
            }
         }
         return max;
      }
      public int Min(int[] data)
      {
         int min = data[0];
         for (int i = 0; i &lt; data.Length; i++)
         {
            if (data[i] &lt; min)
            {
               min = data[i];

            }
         }
         return min;
      }
      public double[] calctav(int alfa, double [] nr)
      {
         double rd;
         double sa;
         double[] n2 = new double[2001];
         double[] np = new double[2001];
         double[] nm = new double[2001];
         double[] a = new double[2001];
         double[] k = new double[2001];
            
         double[] b1 = new double[2001];
         double[] b2 = new double[2001];
         double[] b = new double[2001];
         double[] b3 = new double[2001];
         double[] a3 = new double[2001];
         double[] ts = new double[2001];
         double[] tp1 = new double[2001];
         double[] tp2 = new double[2001];
         double[] tp3 = new double[2001];
         double[] tp4 = new double[2001];
         double[] tp5 = new double[2001];
         double[] tp = new double[2001];
         double[] tav = new double[2001];

         rd = Math.PI / 180;
         for (int i = 0; i &lt; 2001; i++)
         {
            n2[i] = nr[i] * nr[i];
         }
         for (int i = 0; i &lt; 2001; i++)
         {
            np[i] = n2[i] + 1;
         }
         for (int i = 0; i &lt; 2001; i++)
         {
            nm[i] = n2[i] - 1;
         }
         for (int i = 0; i &lt; 2001; i++)
         {
            a[i] = (nr[i] + 1) * (nr[i] + 1) / 2;
         }
         for (int i = 0; i &lt; 2001; i++)
         {
            k[i] = -(n2[i] - 1) * (n2[i] - 1) / 4;
         }
         sa = Math.Sin(alfa * rd);

         for (int i = 0; i &lt; 2001; i++)
         {
            if(alfa != 90)
            {
               b1[i] = Math.Sqrt((sa * sa - np[i] / 2) * (sa * sa - np[i] / 2) + k[i]);
            }
            else
            {
               b1[i] = 0;
            }
         }
         for (int i = 0; i &lt; 2001; i++)
         {
            b2[i] = sa * sa - np[i] / 2;
         }
         for (int i = 0; i &lt; 2001; i++)
         {
            b[i] = b1[i] - b2[i];
         }
         for (int i = 0; i &lt; 2001; i++)
         {
            b3[i] = b[i] * b[i] * b[i];
         }
         for (int i = 0; i &lt; 2001; i++)
         {
            a3[i] = a[i] * a[i] * a[i];
         }
         for (int i = 0; i &lt; 2001; i++)
         {
            ts[i] = (k[i] * k[i] / (6 * b3[i]) + k[i] / b[i] - b[i] / 2) - (k[i] * k[i] / (6 * a3[i]) + k[i] / a[i] - a[i] / 2);
         }
         for (int i = 0; i &lt; 2001; i++)
         {
            tp1[i] = -2 * n2[i] * (b[i] - a[i]) / (np[i] * np[i]);
         }
         for (int i = 0; i &lt; 2001; i++)
         {
            tp2[i] = -2 * n2[i] * np[i] * Math.Log(b[i] / a[i]) / (nm[i] * nm[i]);
         }
         for (int i = 0; i &lt; 2001; i++)
         {
            tp3[i] = n2[i] * (1 / b[i] - 1 / a[i]) / 2;
         }
         for (int i = 0; i &lt; 2001; i++)
         {
            tp4[i] = 16 * n2[i] * n2[i] * (n2[i] * n2[i] + 1) * Math.Log((2 * np[i] * b[i] - nm[i] * nm[i]) / (2 * np[i] * a[i] - nm[i] * nm[i])) / (np[i] * np[i] * np[i] * nm[i] * nm[i]);
         }
         for (int i = 0; i &lt; 2001; i++)
         {
            tp5[i] = 16 * Math.Pow(n2[i], 3) * (1 / (2 * np[i] * b[i] - Math.Pow(nm[i], 2)) - 1 / (2 * np[i] * a[i] - Math.Pow(nm[i], 2))) / Math.Pow(np[i], 3);
         }
         for (int i = 0; i &lt; 2001; i++)
         {
            tp[i] = tp1[i] + tp2[i] + tp3[i] + tp4[i] + tp5[i];
         }
         for (int i = 0; i &lt; 2001; i++)
         {
            tav[i] = (ts[i] + tp[i]) / (2 * sa * sa);
         }
         return tav;
      }
      public double exponentialintegralei(double x)
      {
         double result = 0;
         double eul = 0;
         double f = 0;
         double f1 = 0;
         double f2 = 0;
         double w = 0;

         eul = 0.5772156649015328606065;
         if ((double) (x) &lt;= (double) (0))
         {
            result = 0;
            return result;
         }
         if ((double) (x) &lt; (double) (2))
         {
            f1 = -5.350447357812542947283;
            f1 = f1 * x + 218.5049168816613393830;
            f1 = f1 * x - 4176.572384826693777058;
            f1 = f1 * x + 55411.76756393557601232;
            f1 = f1 * x - 331338.1331178144034309;
            f1 = f1 * x + 1592627.163384945414220;
            f2 = 1.000000000000000000000;
            f2 = f2 * x - 52.50547959112862969197;
            f2 = f2 * x + 1259.616186786790571525;
            f2 = f2 * x - 17565.49581973534652631;
            f2 = f2 * x + 149306.2117002725991967;
            f2 = f2 * x - 729494.9239640527645655;
            f2 = f2 * x + 1592627.163384945429726;
            f = f1 / f2;
            result = eul + Math.Log(x) + x * f;
            return result;
         }
         if ((double) (x) &lt; (double) (4))
         {
            w = 1 / x;
            f1 = 1.981808503259689673238E-2;
            f1 = f1 * w - 1.271645625984917501326;
            f1 = f1 * w - 2.088160335681228318920;
            f1 = f1 * w + 2.755544509187936721172;
            f1 = f1 * w - 4.409507048701600257171E-1;
            f1 = f1 * w + 4.665623805935891391017E-2;
            f1 = f1 * w - 1.545042679673485262580E-3;
            f1 = f1 * w + 7.059980605299617478514E-5;
            f2 = 1.000000000000000000000;
            f2 = f2 * w + 1.476498670914921440652;
            f2 = f2 * w + 5.629177174822436244827E-1;
            f2 = f2 * w + 1.699017897879307263248E-1;
            f2 = f2 * w + 2.291647179034212017463E-2;
            f2 = f2 * w + 4.450150439728752875043E-3;
            f2 = f2 * w + 1.727439612206521482874E-4;
            f2 = f2 * w + 3.953167195549672482304E-5;
            f = f1 / f2;
            result = Math.Exp(x) * w * (1 + w * f);
            return result;
         }
         if ((double) (x) &lt; (double) (8))
         {
            w = 1 / x;
            f1 = -1.373215375871208729803;
            f1 = f1 * w - 7.084559133740838761406E-1;
            f1 = f1 * w + 1.580806855547941010501;
            f1 = f1 * w - 2.601500427425622944234E-1;
            f1 = f1 * w + 2.994674694113713763365E-2;
            f1 = f1 * w - 1.038086040188744005513E-3;
            f1 = f1 * w + 4.371064420753005429514E-5;
            f1 = f1 * w + 2.141783679522602903795E-6;
            f2 = 1.000000000000000000000;
            f2 = f2 * w + 8.585231423622028380768E-1;
            f2 = f2 * w + 4.483285822873995129957E-1;
            f2 = f2 * w + 7.687932158124475434091E-2;
            f2 = f2 * w + 2.449868241021887685904E-2;
            f2 = f2 * w + 8.832165941927796567926E-4;
            f2 = f2 * w + 4.590952299511353531215E-4;
            f2 = f2 * w + -4.729848351866523044863E-6;
            f2 = f2 * w + 2.665195537390710170105E-6;
            f = f1 / f2;
            result = Math.Exp(x) * w * (1 + w * f);
            return result;
         }
         if ((double) (x) &lt; (double) (16))
         {
            w = 1 / x;
            f1 = -2.106934601691916512584;
            f1 = f1 * w + 1.732733869664688041885;
            f1 = f1 * w - 2.423619178935841904839E-1;
            f1 = f1 * w + 2.322724180937565842585E-2;
            f1 = f1 * w + 2.372880440493179832059E-4;
            f1 = f1 * w - 8.343219561192552752335E-5;
            f1 = f1 * w + 1.363408795605250394881E-5;
            f1 = f1 * w - 3.655412321999253963714E-7;
            f1 = f1 * w + 1.464941733975961318456E-8;
            f1 = f1 * w + 6.176407863710360207074E-10;
            f2 = 1.000000000000000000000;
            f2 = f2 * w - 2.298062239901678075778E-1;
            f2 = f2 * w + 1.105077041474037862347E-1;
            f2 = f2 * w - 1.566542966630792353556E-2;
            f2 = f2 * w + 2.761106850817352773874E-3;
            f2 = f2 * w - 2.089148012284048449115E-4;
            f2 = f2 * w + 1.708528938807675304186E-5;
            f2 = f2 * w - 4.459311796356686423199E-7;
            f2 = f2 * w + 1.394634930353847498145E-8;
            f2 = f2 * w + 6.150865933977338354138E-10;
            f = f1 / f2;
            result = Math.Exp(x) * w * (1 + w * f);
            return result;
         }
         if ((double) (x) &lt; (double) (32))
         {
            w = 1 / x;
            f1 = -2.458119367674020323359E-1;
            f1 = f1 * w - 1.483382253322077687183E-1;
            f1 = f1 * w + 7.248291795735551591813E-2;
            f1 = f1 * w - 1.348315687380940523823E-2;
            f1 = f1 * w + 1.342775069788636972294E-3;
            f1 = f1 * w - 7.942465637159712264564E-5;
            f1 = f1 * w + 2.644179518984235952241E-6;
            f1 = f1 * w - 4.239473659313765177195E-8;
            f2 = 1.000000000000000000000;
            f2 = f2 * w - 1.044225908443871106315E-1;
            f2 = f2 * w - 2.676453128101402655055E-1;
            f2 = f2 * w + 9.695000254621984627876E-2;
            f2 = f2 * w - 1.601745692712991078208E-2;
            f2 = f2 * w + 1.496414899205908021882E-3;
            f2 = f2 * w - 8.462452563778485013756E-5;
            f2 = f2 * w + 2.728938403476726394024E-6;
            f2 = f2 * w - 4.239462431819542051337E-8;
            f = f1 / f2;
            result = Math.Exp(x) * w * (1 + w * f);
            return result;
         }
         if ((double) (x) &lt; (double) (64))
         {
            w = 1 / x;
            f1 = 1.212561118105456670844E-1;
            f1 = f1 * w - 5.823133179043894485122E-1;
            f1 = f1 * w + 2.348887314557016779211E-1;
            f1 = f1 * w - 3.040034318113248237280E-2;
            f1 = f1 * w + 1.510082146865190661777E-3;
            f1 = f1 * w - 2.523137095499571377122E-5;
            f2 = 1.000000000000000000000;
            f2 = f2 * w - 1.002252150365854016662;
            f2 = f2 * w + 2.928709694872224144953E-1;
            f2 = f2 * w - 3.337004338674007801307E-2;
            f2 = f2 * w + 1.560544881127388842819E-3;
            f2 = f2 * w - 2.523137093603234562648E-5;
            f = f1 / f2;
            result = Math.Exp(x) * w * (1 + w * f);
            return result;
         }
         w = 1 / x;
         f1 = -7.657847078286127362028E-1;
         f1 = f1 * w + 6.886192415566705051750E-1;
         f1 = f1 * w - 2.132598113545206124553E-1;
         f1 = f1 * w + 3.346107552384193813594E-2;
         f1 = f1 * w - 3.076541477344756050249E-3;
         f1 = f1 * w + 1.747119316454907477380E-4;
         f1 = f1 * w - 6.103711682274170530369E-6;
         f1 = f1 * w + 1.218032765428652199087E-7;
         f1 = f1 * w - 1.086076102793290233007E-9;
         f2 = 1.000000000000000000000;
         f2 = f2 * w - 1.888802868662308731041;
         f2 = f2 * w + 1.066691687211408896850;
         f2 = f2 * w - 2.751915982306380647738E-1;
         f2 = f2 * w + 3.930852688233823569726E-2;
         f2 = f2 * w - 3.414684558602365085394E-3;
         f2 = f2 * w + 1.866844370703555398195E-4;
         f2 = f2 * w - 6.345146083130515357861E-6;
         f2 = f2 * w + 1.239754287483206878024E-7;
         f2 = f2 * w - 1.086076102793126632978E-9;
         f = f1 / f2;
         result = Math.Exp(x) * w * (1 + w * f);
         return result;
      }
      public double exponentialintegralen(double x, int n)
      {
         double result = 0;
         double r = 0;
         double t = 0;
         double yk = 0;
         double xk = 0;
         double pk = 0;
         double pkm1 = 0;
         double pkm2 = 0;
         double qk = 0;
         double qkm1 = 0;
         double qkm2 = 0;
         double psi = 0;
         double z = 0;
         int i = 0;
         int k = 0;
         double big = 0;
         double eul = 0;

         eul = 0.57721566490153286060;
         big = 1.44115188075855872 * Math.Pow(10, 17);
         if (((n &lt; 0 || (double) (x) &lt; (double) (0)) || (double) (x) &gt; (double) (170)) || ((double) (x) == (double) (0) &amp;&amp; n &lt; 2))
         {
            result = -1;
            return result;
         }
         if ((double) (x) == (double) (0))
         {
            result = (double) 1 / (double) (n - 1);
            return result;
         }
         if (n == 0)
         {
            result = Math.Exp(-x) / x;
            return result;
         }
         if (n &gt; 5000)
         {
            xk = x + n;
            yk = 1 / (xk * xk);
            t = n;
            result = yk * t * (6 * x * x - 8 * t * x + t * t);
            result = yk * (result + t * (t - 2.0 * x));
            result = yk * (result + t);
            result = (result + 1) * Math.Exp(-x) / xk;
            return result;
         }
         if ((double) (x) &lt;= (double) (1))
         {
            psi = -eul - Math.Log(x);
            for (i = 1; i &lt;= n - 1; i++)
            {
               psi = psi + (double) 1 / (double) i;
            }
            z = -x;
            xk = 0;
            yk = 1;
            pk = 1 - n;
            if (n == 1)
            {
               result = 0.0;
            }
            else
            {
               result = 1.0 / pk;
            }
            do
            {
               xk = xk + 1;
               yk = yk * z / xk;
               pk = pk + 1;
               if ((double) (pk) != (double) (0))
               {
                  result = result + yk / pk;
               }
               if ((double) (result) != (double) (0))
               {
                  t = Math.Abs(yk / result);
               }
               else
               {
                  t = 1;
               }
            }
            while ((double) (t) &gt;= (double) (0.000001));
            t = 1;
            for (i = 1; i &lt;= n - 1; i++)
            {
               t = t * z / i;
            }
            result = psi * t - result;
            return result;
         }
         else
         {
            k = 1;
            pkm2 = 1;
            qkm2 = x;
            pkm1 = 1.0;
            qkm1 = x + n;
            result = pkm1 / qkm1;
            do
            {
               k = k + 1;
               if (k % 2 == 1)
               {
                  yk = 1;
                  xk = n + (double) (k - 1) / (double) 2;
               }
               else
               {
                  yk = x;
                  xk = (double) k / (double) 2;
               }
               pk = pkm1 * yk + pkm2 * xk;
               qk = qkm1 * yk + qkm2 * xk;
               if ((double) (qk) != (double) (0))
               {
                  r = pk / qk;
                  t = Math.Abs((result - r) / r);
                  result = r;
               }
               else
               {
                  t = 1;
               }
               pkm2 = pkm1;
               pkm1 = pk;
               qkm2 = qkm1;
               qkm1 = qk;
               if ((double) (Math.Abs(pk)) &gt; (double) (big))
               {
                  pkm2 = pkm2 / big;
                  pkm1 = pkm1 / big;
                  qkm2 = qkm2 / big;
                  qkm1 = qkm1 / big;
               }
            }
            while ((double) (t) &gt;= (double) (0.000001));
            result = result * Math.Exp(-x);
         }
         return result;
      }
   
      
}</text>
      </manager2>
      <manager2 name="SIF">
        <ui>
          <ci type="text" description="CO2 concentration within the intercellular air space">250</ci>
          <tao type="text" description="CO2 concentration at the compensation point">50</tao>
          <p0 type="text" description="The maximum photochemical yield">0.8</p0>
          <j0 type="text" description="The maximum possible electron transport rate">5</j0>
          <KF type="text" description="Fluorescence rate coefficients">0.05</KF>
          <alpha type="text" description="KN fitting parameter alpha ">2.83</alpha>
          <beta type="text" description="KN fitting parameter beta">0.114</beta>
          <KN0 type="text" description="KN fitting parameter KN0">2.48</KN0>
          <fesp type="text" description="Probability of SIF escaping">0.35</fesp>
        </ui>
        <text>
using System;
using ModelFramework;

public class Script 
{      
   [Link] Paddock MyPaddock; // Can be used to dynamically get access to simulation structure and variables
   [Input] DateTime Today;   // Equates to the value of the current simulation date - value comes from CLOCK
   [Input] double BIOshootDAY;
   [Input] double RootShoot;
   [Input] double mint;
   [Input] double maxt;
   [Input] double RadIntDcaps;
   [Input] double ratio;
   [Input] double [] ratioall;
   [Input] double LAI; 
   [Output] double A;
   [Output] double Je;
   [Output] double P;
   [Output] double X;
   [Output] double KN;
   [Output] double KD;
   [Output] double F;
   [Output] double Fsingle_spectral_tot;
   [Output] double Fsingle_spectral_toc;
 
 
   [Output] double Fyield;
   [Output] double [] TOT=new double [211];
   [Output] double i0;
   [Output] double fes = 0; 
   [Param] double ci;
   [Param] double tao;
   [Param] double p0;
   [Param] double j0;
   [Param] double KF;
   [Param] double alpha;
   [Param] double beta;
   [Param] double KN0;
   [Param] double fesp;


   // The following event handler will be called once at the beginning of the simulation
   [EventHandler] public void OnInitialised()
   {

   }

   // The following event handler will be called each day at the beginning of the day
   [EventHandler] public void OnPrepare()
   {          
      if(LAI&gt;1)
      {
         
            
         A = BIOshootDAY * (1 + RootShoot) / 44 / 0.4;//The canopy-level photosynthesis
         Je = A * ((ci + tao * 2) / (ci - tao));//The actual electron transport rate
         P = p0 * Je / j0;//Photochemical quantum yield
         X = 1 - P / p0;//The degree of light saturation

         KN = (1 + beta) * Math.Pow(X, alpha) / (beta + Math.Pow(X, alpha)) * KN0;//Nonphotochemical quenching rate coefficients
         KD = 0.03 * (mint + maxt) / 2 + 0.0773;//Radiationless decay
         if (KD &lt; 0.87)
         {
            KD = 0.87;
         }     

         F = KF / (KF + KN + KD) * (1 - P) * RadIntDcaps;//Emitted fluorescence ( MJ/m2)
         Fyield = F / RadIntDcaps;//  Fluorescence yield 
         F = F * 1000000 / (3600 * 24);//Unit conversion from MJ/m2 to W/m2
         Fsingle_spectral_tot = F * ratio;   //Total fluorescence emitted for single spectral (W/m2/nm)    
         Fsingle_spectral_toc = Fsingle_spectral_tot * fesp/ 3.14 * 1000;// Canopy fluorescence emitted for single spectral observed by the senor (mW/m2/nm/sr)
         Fsingle_spectral_tot = Fsingle_spectral_tot * 1000;//Unit mW/m2/nm  
      
        //Total emitted fluorescence for wavelengths of 640 to 850 nm, with 1 nm resolution (unit mW/m2/nm) 
         for(int i = 0;i &lt; 211;i++)
         {
            TOT[i] = F * ratioall[i] * 1000;      
         }
      }
      

   }

}
		</text>
      </manager2>
    </area>
  </simulation>
  <factorial name="Factorials">
    <active>0</active>
    <settings />
    <factor>
      <targets>
        <Target>/simulations/USsoybean/paddock/Photosynthesis</Target>
      </targets>
      <vars>
        <J>1.85,1,2.22</J>
      </vars>
      <manager2 name="Photosynthesis">
        <ui>
          <Vc type="text" description="PM.Canopy.CPath.PsiVc">1.1</Vc>
          <J type="text" description="PM.Canopy.CPath.PsiJ ">1.85</J>
          <Rd type="text" description="PM.Canopy.CPath.PsiRd">0</Rd>
          <Gm type="text" description="PM.Canopy.CPath.PsiGm">0.005296</Gm>
        </ui>
        <text>
using System;
using ModelFramework;
using LayerCanopyPhotosynthesis; //添加引用

 
public class Script 
{   
   [Param()] private double Vc;
   [Param()] private double J;
   [Param()] private double Rd;
   [Param()] private double Gm;
   [Link]  public Simulation MySimulation;
   [Link] Paddock MyPaddock; // Can be used to dynamically get access to simulation structure and variables
   [Input] DateTime Today;   // Equates to the value of the current simulation date - value comes from CLOCK
   [Output] public double[] dcaps = new double[4];
   
   //Additional Outputs
   [Output] public double BIOtotalDAY;
   [Output] public double BIOshootDAY;
   [Output] public double RootShoot;
   [Output] public double EcanDemand; 
   [Output] public double EcanSupply;
   [Output] public double RUE;
   [Output] public double TE; 
   [Output] public double RadIntDcaps; 
   
   
   
   
   public PhotosynthesisModel PM;
   public double LAITrigger;
   


   // The following event handler will be called once at the beginning of the simulation
   [EventHandler] public void OnInitialised()
   {
      string PhotosyntheticPathway = "C3"; //Change this to change pathway
            
      if(PhotosyntheticPathway == "C3")
      {
         PM = new LayerCanopyPhotosynthesis.PhotosynthesisModelC3();
         
         PM.Initialised = false;
         PM.photoPathway = LayerCanopyPhotosynthesis.PhotosynthesisModel.PhotoPathway.C3;

         PM.conductanceModel = LayerCanopyPhotosynthesis.PhotosynthesisModel.ConductanceModel.SIMPLE;
         PM.electronTransportModel = LayerCanopyPhotosynthesis.PhotosynthesisModel.ElectronTransportModel.EMPIRICAL;

         PM.Canopy.NLayers = 1;
         
         LAITrigger = 1.0;
         
         PM.B = 0.41;                                    //B-Biomass Conversion Coefficient
         PM.Canopy.LeafAngle = 60;                       //LeafAngle-Leaf Angle
         PM.Canopy.CPath.SLNRatioTop = 1.3;              //SLNRatioTop-SLNRatioTop
         
         PM.Canopy.CPath.PsiVc = Vc;                    //psiVc-Psi Vc 1.1
         PM.Canopy.CPath.PsiJ = J;                     //psiJ-Psi J 1.85
         PM.Canopy.CPath.PsiRd = Rd;                      //psiRd-Psi Rd
         
         PM.Canopy.CPath.PsiGm = Gm;               //0.005296
         PM.Canopy.CPath.CGm = 0.0;
         
         double PsiFactor = 1;                               //psiFactor-Psi Reduction Factor
         
         PM.Canopy.CPath.PsiVc *= PsiFactor;
         PM.Canopy.CPath.PsiJ *= PsiFactor;
         PM.Canopy.CPath.PsiRd *= PsiFactor;                   
         
         PM.Canopy.Ca = 370;                             //Ca-Atomospheric CO2 partial pressure
         PM.Canopy.CPath.CiCaRatio = 0.70;               //CiCaRatio-Ci/Ca Ratio (0 to calculate using Ci)
         PM.Canopy.CPath.StructuralN = 14;               //structuralN-Structural N
         PM.Canopy.Gbs_CO2 = 0.003;                      //gbs-Conductance to CO2 leakage from the bundle sheath to mesophyll
         
         PM.EnvModel.RPAR = 0.5;                         //R_PAR-Fraction of PAR energy to that of the total solar
         
         PM.Canopy.DiffuseExtCoeff = 0.78;               //kd_PAR-Diffuse PAR extinction coefficient
         PM.Canopy.DiffuseExtCoeffNIR = 0.8;             //kd_NIR-Diffuse NIR extinction coefficient
         PM.Canopy.LeafScatteringCoeff = 0.15;           //s_PAR-Leaf-level scattering coefficient for PAR
         PM.Canopy.LeafScatteringCoeffNIR = 0.8;         //s_NIR-Leaf-level scattering coefficient for NIR
         PM.Canopy.DiffuseReflectionCoeff = 0.036;       //rcd_PAR-Canopy-level reflection coefficient for diffuse PAR
         PM.Canopy.DiffuseReflectionCoeffNIR = 0.389;    //rcd_NIR-Canopy-level reflection coefficient for diffuse NIR
         
         PM.Canopy.OxygenPartialPressure = 210000;       //Ol-Oxygen partial pressure inside leaves in canopy
         
         PM.Canopy.U0 = 1.5;                               //u-Wind speed
         PM.Canopy.LeafWidth = 0.05;                     //wl-Leaf width
         PM.Canopy.Ku = 1.5;                             //kw-Wind speed profile distribution coefficient
         
         PM.Canopy.Theta = 0.7;                          //theta-empirical curvature factor
         PM.Canopy.F = 0.15;                             //f-spectral correction factor
         
         PM.Canopy.CPath.KcP25 = 273.422964228666;       //Kc_25-Michaelis Menten constants of Rubisco carboxylation at 25 degrees C
         PM.Canopy.CPath.KcTMin = 93720;                 //Kc_min-Minimum temperature of Kc
         
         PM.Canopy.CPath.KoP25 = 165824.064155384;       //Ko_25-Michaelis Menten constants of Rubisco oxygenation at 25 degrees C
         PM.Canopy.CPath.KoTMin = 33600;                 //Ko_min-Minimum temperature of Ko
         
         PM.Canopy.CPath.VcTMin = 65330;                 //Vcmax_min-Minimum temperature of Vcmax
         
         PM.Canopy.CPath.VcMax_VoMaxP25 = 4.59217066521612;    //VcmaxVomax_25-Vcmax/Vomax at 25 degrees C
         PM.Canopy.CPath.VcMax_VoMaxTMin = 35713.19871277176;   //VcmaxVomax_min-Minimum temperature of Vcmax/Vomax
         
         PM.Canopy.CPath.RdTMin = 46390;                 //Rd_min-Minimum temperature of Rd
       
         PM.Canopy.CPath.JTMin = 0.0;                    //Jmax_min-Minimum temperature of Jmax
         PM.Canopy.CPath.JTOpt = 30;                     //Jmax_opt-Optimum temperature of Jmax
         PM.Canopy.CPath.JTMax = 45;                     //Jmax_max-Maximum temperature of Jmax
         PM.Canopy.CPath.JMaxC = 0.911017958600129;      //Jmax_c-Scaling constant of Jamx
         PM.Canopy.CPath.JBeta = 1;                      //Jmax Beta value
         
       
         //PM.Canopy.CPath.GmP25 = 0.55;                   //gm_25-Mesophyll conductance for CO2 at 25 degrees C
         PM.Canopy.CPath.GmTMin = 0;                     //gm_min-Minimum temperature of gm
         PM.Canopy.CPath.GmTOpt = 29.2338417788683;                    //gm_opt-Optimum temperature of gm
         PM.Canopy.CPath.GmTMax = 45;                    //gm_max-Maximum temperature of gm
         PM.Canopy.CPath.GmC = 0.875790608584141;        //gm_c-Scaling constant of gm
         PM.Canopy.CPath.GmBeta = 1;                     //gm Beta value
         
      }
      else
      {
         PM = new LayerCanopyPhotosynthesis.PhotosynthesisModelC4();
         
         PM.Initialised = false;
         PM.photoPathway = LayerCanopyPhotosynthesis.PhotosynthesisModel.PhotoPathway.C4;

         PM.conductanceModel = LayerCanopyPhotosynthesis.PhotosynthesisModel.ConductanceModel.SIMPLE;
         PM.electronTransportModel = LayerCanopyPhotosynthesis.PhotosynthesisModel.ElectronTransportModel.EMPIRICAL;

         PM.Canopy.NLayers = 1;
         
         LAITrigger = 1;
         
         PM.B = 0.41;                                   //B-Biomass Conversion Coefficient
         
         PM.Canopy.LeafAngle = 60;                       //LeafAngle-Leaf Angle
         PM.Canopy.CPath.SLNRatioTop = 1.3;              //SLNRatioTop-SLNRatioTop
         
         PM.Canopy.CPath.PsiVc = 0.465;                  //psiVc-Psi Vc
         PM.Canopy.CPath.PsiJ = 2.7;                     //psiJ-Psi J
         PM.Canopy.CPath.PsiRd = 0;                      //psiRd-Psi Rd
         PM.Canopy.CPath.PsiVp = 1.55;                   //psiVp-Psi Vp (C4)
         
         PM.Canopy.CPath.PsiGm = 0;
         PM.Canopy.CPath.CGm = 1.2;
         
         double PsiFactor = 0.4;                         //psiFactor-Psi Reduction Factor
         
         PM.Canopy.CPath.PsiVc *= PsiFactor;
         PM.Canopy.CPath.PsiJ *= PsiFactor;
         PM.Canopy.CPath.PsiRd *= PsiFactor;
         PM.Canopy.CPath.PsiVp *= PsiFactor;
         
         
         PM.Canopy.Ca = 363;                             //Ca-Atomospheric CO2 partial pressure
         PM.Canopy.Vpr_l = 120;                          //Vpr-PEP regeneration rate per unit leaf area at 25°C (C4)
         PM.Canopy.CPath.CiCaRatio = 0.45;               //CiCaRatio-Ci/Ca Ratio (0 to calculate using Ci)
         PM.Canopy.CPath.StructuralN = 14;               //structuralN-Structural N
         
         PM.EnvModel.RPAR = 0.5;                         //R_PAR-Fraction of PAR energy to that of the total solar
         
         PM.Canopy.Gbs_CO2 = 0.003;                      //gbs-Conductance to CO2 leakage from the bundle sheath to mesophyll
         
         PM.Canopy.DiffuseExtCoeff = 0.78;               //kd_PAR-Diffuse PAR extinction coefficient
         PM.Canopy.DiffuseExtCoeffNIR = 0.8;             //kd_NIR-Diffuse NIR extinction coefficient
         PM.Canopy.LeafScatteringCoeff = 0.15;           //s_PAR-Leaf-level scattering coefficient for PAR
         PM.Canopy.LeafScatteringCoeffNIR = 0.8;         //s_NIR-Leaf-level scattering coefficient for NIR
         PM.Canopy.DiffuseReflectionCoeff = 0.036;       //rcd_PAR-Canopy-level reflection coefficient for diffuse PAR
         PM.Canopy.DiffuseReflectionCoeffNIR = 0.389;    //rcd_NIR-Canopy-level reflection coefficient for diffuse NIR
         
         PM.Canopy.OxygenPartialPressure = 210000;       //Ol-Oxygen partial pressure inside leaves in canopy
         
         PM.Canopy.U0 = 1.5;                               //u-Wind speed
         PM.Canopy.LeafWidth = 0.15;                     //wl-Leaf width
         PM.Canopy.Ku = 1.5;                             //kw-Wind speed profile distribution coefficient
         
         PM.Canopy.Theta = 0.7;                          //theta-empirical curvature factor
         PM.Canopy.F = 0.15;                             //f-spectral correction factor
         PM.Canopy.Alpha = 0.1;                          //alpha-fraction of PSII activity in the bundle sheath (C4)
         PM.Canopy.CPath.Phi = 2.0;                      //phi-extra energy (ATP) cost required from processes other than the C3 cycle
         PM.Canopy.X = PM.Canopy.CPath.Phi / (3 + PM.Canopy.CPath.Phi); //x-fraction of electron transport partitioned to mesophyll chloroplasts (C4)
         
         PM.Canopy.CPath.KcP25 = 1210;                   //Kc_25-Michaelis Menten constants of Rubisco carboxylation at 25 degrees C
         PM.Canopy.CPath.KcTMin = 64200;                 //Kc_min-Minimum temperature of Kc
         
         PM.Canopy.CPath.KoP25 = 292000;                 //Ko_25-Michaelis Menten constants of Rubisco oxygenation at 25 degrees C
         PM.Canopy.CPath.KoTMin = 10500;                 //Ko_min-Minimum temperature of Ko
            
         PM.Canopy.CPath.VcTMin = 78000;                 //Vcmax_min-Minimum temperature of Vcmax
          
         PM.Canopy.CPath.VcMax_VoMaxP25 = 5.51328906454566;    //VcmaxVomax_25-Vcmax/Vomax at 25 degrees C
         PM.Canopy.CPath.VcMax_VoMaxTMin = 21265.4029552906;   //VcmaxVomax_min-Minimum temperature of Vcmax/Vomax
           
         PM.Canopy.CPath.KpP25 = 75;                    //Kp_25-Michaelis-Menten constant of PEP carboxylation at 25 degrees C (C4)
         PM.Canopy.CPath.KpTMin = 36300;                 //Kp_min-Minimum temperature of Kp (C4)
            
         PM.Canopy.CPath.VpMaxTMin = 57043.2677590512;   //Vpmax_min-Minimum temperature of Vpmax (C4)
           
         PM.Canopy.CPath.RdTMin = 46390;                 //Rd_min-Minimum temperature of Rd
         
         PM.Canopy.CPath.JTMin = 0;                      //Jmax_min-Minimum temperature of Jmax
         PM.Canopy.CPath.JTOpt = 37.8649150880407;       //Jmax_opt-Optimum temperature of Jmax
         PM.Canopy.CPath.JTMax = 55;                     //Jmax_max-Maximum temperature of Jmax
         PM.Canopy.CPath.JMaxC = 0.711229539802063;      //Jmax_c-Scaling constant of Jamx
         PM.Canopy.CPath.JBeta = 1;
         
         //PM.Canopy.CPath.GmP25 = 1.2;                   //gm_25-Mesophyll conductance for CO2 at 25 degrees C
         PM.Canopy.CPath.GmTMin = 0;                     //gm_min-Minimum temperature of gm
         PM.Canopy.CPath.GmTOpt = 42;                    //gm_opt-Optimum temperature of gm
         PM.Canopy.CPath.GmTMax = 55;                    //gm_max-Maximum temperature of gm
         PM.Canopy.CPath.GmC = 0.462820450976839;        //gm_c-Scaling constant of gm
         PM.Canopy.CPath.GmBeta = 1;
         
          
        
      }
      //Set the LAI trigger
      MyPaddock.Set("laiTrigger", LAITrigger);
      //Set the LAI trigger
      MyPaddock.Set("laiTrigger", LAITrigger);
   }
   // This routine is called when the plant model wants us to do the calculation
   //[EventHandler] public void Ondodcaps(CalcDCaPType c) {
   [EventHandler] public void Ondodcaps() {
      //      ApsimC3PhotoLink p = new ApsimC3PhotoLink();
      //      dcap = p.Calc(c.doy, c.latitude, c.maxT, c.minT, c.radn, c.lai, c.sln, c.soilWaterAvail);
      //
      
      int DOY = 0;
      double latitude = 0;
      double maxT = 0;
      double minT = 0;
      double radn = 0;
      double RootShootRatio = 0;
      double SLNDCaPS = 0;
      double SWAvailable = 0;
      double lai = 0;
      double a=Math.Sqrt(9);
     
      MyPaddock.Get("DOY", out DOY);
      MyPaddock.Get("latitude", out latitude);
      MyPaddock.Get("maxT", out maxT);
      MyPaddock.Get("minT", out minT);
      MyPaddock.Get("radn", out radn);
      MyPaddock.Get("RootShootRatio", out RootShootRatio);
      MyPaddock.Get("SLN", out SLNDCaPS);
      MyPaddock.Get("SWAvailable", out SWAvailable);
      MyPaddock.Get("lai", out lai);
      
      //Check
      //            Console.WriteLine("DCaps Input Manager--------------");
      //            Console.WriteLine("DOY = " + DOY.ToString());
      //            Console.WriteLine("latitude = " + latitude.ToString());
      //            Console.WriteLine("maxT = " + maxT.ToString());
      //            Console.WriteLine("minT = " + minT.ToString());
      //            Console.WriteLine("radn = " + radn.ToString());
      //            Console.WriteLine("RootShootRatio = " + RootShootRatio.ToString());
      //            Console.WriteLine("SLNDCaPS = " + SLNDCaPS.ToString());
      //            Console.WriteLine("SWAvailable = " + SWAvailable.ToString());
      //            Console.WriteLine("lai = " + lai.ToString());
      //            Console.WriteLine("DCaps Input Manager--------------");
      
      //public override double[] RunApsim(int DOY, double latitude, double maxT, double minT, double radn, double lai, double SLNDCaPS, double soilWaterAvail, double RootShootRatio)
        
      dcaps = PM.RunApsim(DOY, latitude, maxT, minT, radn, lai, SLNDCaPS, SWAvailable, RootShootRatio);
      
      //Additional outputs
      RootShoot = RootShootRatio;
      BIOshootDAY = dcaps[0];
      BIOtotalDAY = BIOshootDAY * (1 + RootShoot);
      EcanDemand = dcaps[1]; 
      EcanSupply = dcaps[2];
      RadIntDcaps = dcaps[3];
      RUE = BIOshootDAY / RadIntDcaps;
      TE = BIOshootDAY / EcanSupply; 
      
      
      
      //Check Outputs
      //      Console.WriteLine("DCaps Out Manager--------------");
      //      Console.WriteLine("1 = " + dcaps[0].ToString());
      //      Console.WriteLine("2 = " + dcaps[1].ToString());
      //      Console.WriteLine("3 = " + dcaps[2].ToString());
      //      Console.WriteLine("4 = " + dcaps[3].ToString());
      //      Console.WriteLine("DCaps Out Manager--------------");
      //      
      
   }
   // After we've done the calculation, the result is here
      
   // Set its default value to garbage so that we find out quickly
   [EventHandler] public void OnPrepare()
   {
      for(int i = 0; i &lt; 4; i++) { dcaps[i] = -1.0f;}
   }
}
		</text>
        <Reference>
          <ref type="text" description="Path to assembly:">%apsim%/Model/DCaPST.dll</ref>
        </Reference>
      </manager2>
    </factor>
  </factorial>
</folder>